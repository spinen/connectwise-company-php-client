<?php
/**
 * CompanyMerge
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Company
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Company API
 *
 * ConnectWise Company API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model;

use \ArrayAccess;

/**
 * CompanyMerge Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Company
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CompanyMerge implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CompanyMerge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'to_company_id' => 'int',
        'name' => 'string',
        'identifier' => 'string',
        'status' => 'string',
        'type' => 'string',
        'primary_address' => 'string',
        'primary_contact' => 'string',
        'phone' => 'string',
        'fax' => 'string',
        'website' => 'string',
        'market' => 'string',
        'territory' => 'string',
        'revenue' => 'string',
        'revenue_year' => 'string',
        'number_of_employees' => 'string',
        'sic_code' => 'string',
        'date_acquired' => 'string',
        'time_zone' => 'string',
        'source_list' => 'string',
        'user_defined_field1' => 'string',
        'user_defined_field2' => 'string',
        'user_defined_field3' => 'string',
        'user_defined_field4' => 'string',
        'user_defined_field5' => 'string',
        'user_defined_field6' => 'string',
        'user_defined_field7' => 'string',
        'user_defined_field8' => 'string',
        'user_defined_field9' => 'string',
        'user_defined_field10' => 'string',
        'billing_address' => 'string',
        'billing_contact' => 'string',
        'tax_code' => 'string',
        'account_number' => 'string',
        'billing_terms' => 'string',
        'notes' => 'string',
        'sites' => 'string',
        'activities' => 'string',
        'opportunities' => 'string',
        'services' => 'string',
        'projects' => 'string',
        'contacts' => 'string',
        'documents' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'to_company_id' => 'toCompanyId',
        'name' => 'name',
        'identifier' => 'identifier',
        'status' => 'status',
        'type' => 'type',
        'primary_address' => 'primaryAddress',
        'primary_contact' => 'primaryContact',
        'phone' => 'phone',
        'fax' => 'fax',
        'website' => 'website',
        'market' => 'market',
        'territory' => 'territory',
        'revenue' => 'revenue',
        'revenue_year' => 'revenueYear',
        'number_of_employees' => 'numberOfEmployees',
        'sic_code' => 'sicCode',
        'date_acquired' => 'dateAcquired',
        'time_zone' => 'timeZone',
        'source_list' => 'sourceList',
        'user_defined_field1' => 'userDefinedField1',
        'user_defined_field2' => 'userDefinedField2',
        'user_defined_field3' => 'userDefinedField3',
        'user_defined_field4' => 'userDefinedField4',
        'user_defined_field5' => 'userDefinedField5',
        'user_defined_field6' => 'userDefinedField6',
        'user_defined_field7' => 'userDefinedField7',
        'user_defined_field8' => 'userDefinedField8',
        'user_defined_field9' => 'userDefinedField9',
        'user_defined_field10' => 'userDefinedField10',
        'billing_address' => 'billingAddress',
        'billing_contact' => 'billingContact',
        'tax_code' => 'taxCode',
        'account_number' => 'accountNumber',
        'billing_terms' => 'billingTerms',
        'notes' => 'notes',
        'sites' => 'sites',
        'activities' => 'activities',
        'opportunities' => 'opportunities',
        'services' => 'services',
        'projects' => 'projects',
        'contacts' => 'contacts',
        'documents' => 'documents'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'to_company_id' => 'setToCompanyId',
        'name' => 'setName',
        'identifier' => 'setIdentifier',
        'status' => 'setStatus',
        'type' => 'setType',
        'primary_address' => 'setPrimaryAddress',
        'primary_contact' => 'setPrimaryContact',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'website' => 'setWebsite',
        'market' => 'setMarket',
        'territory' => 'setTerritory',
        'revenue' => 'setRevenue',
        'revenue_year' => 'setRevenueYear',
        'number_of_employees' => 'setNumberOfEmployees',
        'sic_code' => 'setSicCode',
        'date_acquired' => 'setDateAcquired',
        'time_zone' => 'setTimeZone',
        'source_list' => 'setSourceList',
        'user_defined_field1' => 'setUserDefinedField1',
        'user_defined_field2' => 'setUserDefinedField2',
        'user_defined_field3' => 'setUserDefinedField3',
        'user_defined_field4' => 'setUserDefinedField4',
        'user_defined_field5' => 'setUserDefinedField5',
        'user_defined_field6' => 'setUserDefinedField6',
        'user_defined_field7' => 'setUserDefinedField7',
        'user_defined_field8' => 'setUserDefinedField8',
        'user_defined_field9' => 'setUserDefinedField9',
        'user_defined_field10' => 'setUserDefinedField10',
        'billing_address' => 'setBillingAddress',
        'billing_contact' => 'setBillingContact',
        'tax_code' => 'setTaxCode',
        'account_number' => 'setAccountNumber',
        'billing_terms' => 'setBillingTerms',
        'notes' => 'setNotes',
        'sites' => 'setSites',
        'activities' => 'setActivities',
        'opportunities' => 'setOpportunities',
        'services' => 'setServices',
        'projects' => 'setProjects',
        'contacts' => 'setContacts',
        'documents' => 'setDocuments'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'to_company_id' => 'getToCompanyId',
        'name' => 'getName',
        'identifier' => 'getIdentifier',
        'status' => 'getStatus',
        'type' => 'getType',
        'primary_address' => 'getPrimaryAddress',
        'primary_contact' => 'getPrimaryContact',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'website' => 'getWebsite',
        'market' => 'getMarket',
        'territory' => 'getTerritory',
        'revenue' => 'getRevenue',
        'revenue_year' => 'getRevenueYear',
        'number_of_employees' => 'getNumberOfEmployees',
        'sic_code' => 'getSicCode',
        'date_acquired' => 'getDateAcquired',
        'time_zone' => 'getTimeZone',
        'source_list' => 'getSourceList',
        'user_defined_field1' => 'getUserDefinedField1',
        'user_defined_field2' => 'getUserDefinedField2',
        'user_defined_field3' => 'getUserDefinedField3',
        'user_defined_field4' => 'getUserDefinedField4',
        'user_defined_field5' => 'getUserDefinedField5',
        'user_defined_field6' => 'getUserDefinedField6',
        'user_defined_field7' => 'getUserDefinedField7',
        'user_defined_field8' => 'getUserDefinedField8',
        'user_defined_field9' => 'getUserDefinedField9',
        'user_defined_field10' => 'getUserDefinedField10',
        'billing_address' => 'getBillingAddress',
        'billing_contact' => 'getBillingContact',
        'tax_code' => 'getTaxCode',
        'account_number' => 'getAccountNumber',
        'billing_terms' => 'getBillingTerms',
        'notes' => 'getNotes',
        'sites' => 'getSites',
        'activities' => 'getActivities',
        'opportunities' => 'getOpportunities',
        'services' => 'getServices',
        'projects' => 'getProjects',
        'contacts' => 'getContacts',
        'documents' => 'getDocuments'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const NAME_FROM = 'From';
    const NAME_TO = 'To';
    const IDENTIFIER_FROM = 'From';
    const IDENTIFIER_TO = 'To';
    const STATUS_FROM = 'From';
    const STATUS_TO = 'To';
    const TYPE_FROM = 'From';
    const TYPE_TO = 'To';
    const PRIMARY_ADDRESS_FROM = 'From';
    const PRIMARY_ADDRESS_TO = 'To';
    const PRIMARY_CONTACT_FROM = 'From';
    const PRIMARY_CONTACT_TO = 'To';
    const PHONE_FROM = 'From';
    const PHONE_TO = 'To';
    const FAX_FROM = 'From';
    const FAX_TO = 'To';
    const WEBSITE_FROM = 'From';
    const WEBSITE_TO = 'To';
    const MARKET_FROM = 'From';
    const MARKET_TO = 'To';
    const TERRITORY_FROM = 'From';
    const TERRITORY_TO = 'To';
    const REVENUE_FROM = 'From';
    const REVENUE_TO = 'To';
    const REVENUE_YEAR_FROM = 'From';
    const REVENUE_YEAR_TO = 'To';
    const NUMBER_OF_EMPLOYEES_FROM = 'From';
    const NUMBER_OF_EMPLOYEES_TO = 'To';
    const SIC_CODE_FROM = 'From';
    const SIC_CODE_TO = 'To';
    const DATE_ACQUIRED_FROM = 'From';
    const DATE_ACQUIRED_TO = 'To';
    const TIME_ZONE_FROM = 'From';
    const TIME_ZONE_TO = 'To';
    const SOURCE_LIST_FROM = 'From';
    const SOURCE_LIST_TO = 'To';
    const USER_DEFINED_FIELD1_FROM = 'From';
    const USER_DEFINED_FIELD1_TO = 'To';
    const USER_DEFINED_FIELD2_FROM = 'From';
    const USER_DEFINED_FIELD2_TO = 'To';
    const USER_DEFINED_FIELD3_FROM = 'From';
    const USER_DEFINED_FIELD3_TO = 'To';
    const USER_DEFINED_FIELD4_FROM = 'From';
    const USER_DEFINED_FIELD4_TO = 'To';
    const USER_DEFINED_FIELD5_FROM = 'From';
    const USER_DEFINED_FIELD5_TO = 'To';
    const USER_DEFINED_FIELD6_FROM = 'From';
    const USER_DEFINED_FIELD6_TO = 'To';
    const USER_DEFINED_FIELD7_FROM = 'From';
    const USER_DEFINED_FIELD7_TO = 'To';
    const USER_DEFINED_FIELD8_FROM = 'From';
    const USER_DEFINED_FIELD8_TO = 'To';
    const USER_DEFINED_FIELD9_FROM = 'From';
    const USER_DEFINED_FIELD9_TO = 'To';
    const USER_DEFINED_FIELD10_FROM = 'From';
    const USER_DEFINED_FIELD10_TO = 'To';
    const BILLING_ADDRESS_FROM = 'From';
    const BILLING_ADDRESS_TO = 'To';
    const BILLING_CONTACT_FROM = 'From';
    const BILLING_CONTACT_TO = 'To';
    const TAX_CODE_FROM = 'From';
    const TAX_CODE_TO = 'To';
    const ACCOUNT_NUMBER_FROM = 'From';
    const ACCOUNT_NUMBER_TO = 'To';
    const BILLING_TERMS_FROM = 'From';
    const BILLING_TERMS_TO = 'To';
    const NOTES_DISCARD = 'Discard';
    const NOTES_MERGE = 'Merge';
    const SITES_DISCARD = 'Discard';
    const SITES_MERGE = 'Merge';
    const ACTIVITIES_DISCARD = 'Discard';
    const ACTIVITIES_MERGE = 'Merge';
    const OPPORTUNITIES_DISCARD = 'Discard';
    const OPPORTUNITIES_MERGE = 'Merge';
    const SERVICES_DISCARD = 'Discard';
    const SERVICES_MERGE = 'Merge';
    const PROJECTS_DISCARD = 'Discard';
    const PROJECTS_MERGE = 'Merge';
    const CONTACTS_DISCARD = 'Discard';
    const CONTACTS_MERGE = 'Merge';
    const DOCUMENTS_DISCARD = 'Discard';
    const DOCUMENTS_MERGE = 'Merge';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getNameAllowableValues()
    {
        return [
            self::NAME_FROM,
            self::NAME_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getIdentifierAllowableValues()
    {
        return [
            self::IDENTIFIER_FROM,
            self::IDENTIFIER_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_FROM,
            self::STATUS_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FROM,
            self::TYPE_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPrimaryAddressAllowableValues()
    {
        return [
            self::PRIMARY_ADDRESS_FROM,
            self::PRIMARY_ADDRESS_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPrimaryContactAllowableValues()
    {
        return [
            self::PRIMARY_CONTACT_FROM,
            self::PRIMARY_CONTACT_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPhoneAllowableValues()
    {
        return [
            self::PHONE_FROM,
            self::PHONE_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFaxAllowableValues()
    {
        return [
            self::FAX_FROM,
            self::FAX_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getWebsiteAllowableValues()
    {
        return [
            self::WEBSITE_FROM,
            self::WEBSITE_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMarketAllowableValues()
    {
        return [
            self::MARKET_FROM,
            self::MARKET_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTerritoryAllowableValues()
    {
        return [
            self::TERRITORY_FROM,
            self::TERRITORY_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRevenueAllowableValues()
    {
        return [
            self::REVENUE_FROM,
            self::REVENUE_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRevenueYearAllowableValues()
    {
        return [
            self::REVENUE_YEAR_FROM,
            self::REVENUE_YEAR_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getNumberOfEmployeesAllowableValues()
    {
        return [
            self::NUMBER_OF_EMPLOYEES_FROM,
            self::NUMBER_OF_EMPLOYEES_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSicCodeAllowableValues()
    {
        return [
            self::SIC_CODE_FROM,
            self::SIC_CODE_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDateAcquiredAllowableValues()
    {
        return [
            self::DATE_ACQUIRED_FROM,
            self::DATE_ACQUIRED_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTimeZoneAllowableValues()
    {
        return [
            self::TIME_ZONE_FROM,
            self::TIME_ZONE_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSourceListAllowableValues()
    {
        return [
            self::SOURCE_LIST_FROM,
            self::SOURCE_LIST_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserDefinedField1AllowableValues()
    {
        return [
            self::USER_DEFINED_FIELD1_FROM,
            self::USER_DEFINED_FIELD1_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserDefinedField2AllowableValues()
    {
        return [
            self::USER_DEFINED_FIELD2_FROM,
            self::USER_DEFINED_FIELD2_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserDefinedField3AllowableValues()
    {
        return [
            self::USER_DEFINED_FIELD3_FROM,
            self::USER_DEFINED_FIELD3_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserDefinedField4AllowableValues()
    {
        return [
            self::USER_DEFINED_FIELD4_FROM,
            self::USER_DEFINED_FIELD4_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserDefinedField5AllowableValues()
    {
        return [
            self::USER_DEFINED_FIELD5_FROM,
            self::USER_DEFINED_FIELD5_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserDefinedField6AllowableValues()
    {
        return [
            self::USER_DEFINED_FIELD6_FROM,
            self::USER_DEFINED_FIELD6_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserDefinedField7AllowableValues()
    {
        return [
            self::USER_DEFINED_FIELD7_FROM,
            self::USER_DEFINED_FIELD7_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserDefinedField8AllowableValues()
    {
        return [
            self::USER_DEFINED_FIELD8_FROM,
            self::USER_DEFINED_FIELD8_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserDefinedField9AllowableValues()
    {
        return [
            self::USER_DEFINED_FIELD9_FROM,
            self::USER_DEFINED_FIELD9_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserDefinedField10AllowableValues()
    {
        return [
            self::USER_DEFINED_FIELD10_FROM,
            self::USER_DEFINED_FIELD10_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillingAddressAllowableValues()
    {
        return [
            self::BILLING_ADDRESS_FROM,
            self::BILLING_ADDRESS_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillingContactAllowableValues()
    {
        return [
            self::BILLING_CONTACT_FROM,
            self::BILLING_CONTACT_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTaxCodeAllowableValues()
    {
        return [
            self::TAX_CODE_FROM,
            self::TAX_CODE_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccountNumberAllowableValues()
    {
        return [
            self::ACCOUNT_NUMBER_FROM,
            self::ACCOUNT_NUMBER_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillingTermsAllowableValues()
    {
        return [
            self::BILLING_TERMS_FROM,
            self::BILLING_TERMS_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getNotesAllowableValues()
    {
        return [
            self::NOTES_DISCARD,
            self::NOTES_MERGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSitesAllowableValues()
    {
        return [
            self::SITES_DISCARD,
            self::SITES_MERGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getActivitiesAllowableValues()
    {
        return [
            self::ACTIVITIES_DISCARD,
            self::ACTIVITIES_MERGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOpportunitiesAllowableValues()
    {
        return [
            self::OPPORTUNITIES_DISCARD,
            self::OPPORTUNITIES_MERGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getServicesAllowableValues()
    {
        return [
            self::SERVICES_DISCARD,
            self::SERVICES_MERGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getProjectsAllowableValues()
    {
        return [
            self::PROJECTS_DISCARD,
            self::PROJECTS_MERGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getContactsAllowableValues()
    {
        return [
            self::CONTACTS_DISCARD,
            self::CONTACTS_MERGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDocumentsAllowableValues()
    {
        return [
            self::DOCUMENTS_DISCARD,
            self::DOCUMENTS_MERGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['to_company_id'] = isset($data['to_company_id']) ? $data['to_company_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['primary_address'] = isset($data['primary_address']) ? $data['primary_address'] : null;
        $this->container['primary_contact'] = isset($data['primary_contact']) ? $data['primary_contact'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['market'] = isset($data['market']) ? $data['market'] : null;
        $this->container['territory'] = isset($data['territory']) ? $data['territory'] : null;
        $this->container['revenue'] = isset($data['revenue']) ? $data['revenue'] : null;
        $this->container['revenue_year'] = isset($data['revenue_year']) ? $data['revenue_year'] : null;
        $this->container['number_of_employees'] = isset($data['number_of_employees']) ? $data['number_of_employees'] : null;
        $this->container['sic_code'] = isset($data['sic_code']) ? $data['sic_code'] : null;
        $this->container['date_acquired'] = isset($data['date_acquired']) ? $data['date_acquired'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['source_list'] = isset($data['source_list']) ? $data['source_list'] : null;
        $this->container['user_defined_field1'] = isset($data['user_defined_field1']) ? $data['user_defined_field1'] : null;
        $this->container['user_defined_field2'] = isset($data['user_defined_field2']) ? $data['user_defined_field2'] : null;
        $this->container['user_defined_field3'] = isset($data['user_defined_field3']) ? $data['user_defined_field3'] : null;
        $this->container['user_defined_field4'] = isset($data['user_defined_field4']) ? $data['user_defined_field4'] : null;
        $this->container['user_defined_field5'] = isset($data['user_defined_field5']) ? $data['user_defined_field5'] : null;
        $this->container['user_defined_field6'] = isset($data['user_defined_field6']) ? $data['user_defined_field6'] : null;
        $this->container['user_defined_field7'] = isset($data['user_defined_field7']) ? $data['user_defined_field7'] : null;
        $this->container['user_defined_field8'] = isset($data['user_defined_field8']) ? $data['user_defined_field8'] : null;
        $this->container['user_defined_field9'] = isset($data['user_defined_field9']) ? $data['user_defined_field9'] : null;
        $this->container['user_defined_field10'] = isset($data['user_defined_field10']) ? $data['user_defined_field10'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['billing_contact'] = isset($data['billing_contact']) ? $data['billing_contact'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['billing_terms'] = isset($data['billing_terms']) ? $data['billing_terms'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['sites'] = isset($data['sites']) ? $data['sites'] : null;
        $this->container['activities'] = isset($data['activities']) ? $data['activities'] : null;
        $this->container['opportunities'] = isset($data['opportunities']) ? $data['opportunities'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['projects'] = isset($data['projects']) ? $data['projects'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['to_company_id'] === null) {
            $invalid_properties[] = "'to_company_id' can't be null";
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['name'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'name', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['identifier'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'identifier', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['primary_address'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'primary_address', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['primary_contact'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'primary_contact', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['phone'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'phone', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['fax'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'fax', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['website'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'website', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['market'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'market', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['territory'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'territory', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['revenue'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'revenue', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['revenue_year'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'revenue_year', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['number_of_employees'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'number_of_employees', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['sic_code'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'sic_code', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['date_acquired'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'date_acquired', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['time_zone'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'time_zone', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['source_list'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'source_list', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field1'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'user_defined_field1', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field2'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'user_defined_field2', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field3'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'user_defined_field3', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field4'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'user_defined_field4', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field5'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'user_defined_field5', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field6'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'user_defined_field6', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field7'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'user_defined_field7', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field8'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'user_defined_field8', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field9'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'user_defined_field9', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field10'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'user_defined_field10', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['billing_address'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'billing_address', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['billing_contact'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'billing_contact', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['tax_code'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'tax_code', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['account_number'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'account_number', must be one of #{allowed_values}.";
        }

        $allowed_values = ["From", "To"];
        if (!in_array($this->container['billing_terms'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'billing_terms', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['notes'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'notes', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['sites'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'sites', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['activities'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'activities', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['opportunities'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'opportunities', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['services'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'services', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['projects'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'projects', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['contacts'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'contacts', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['documents'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'documents', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['to_company_id'] === null) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['name'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['identifier'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['primary_address'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['primary_contact'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['phone'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['fax'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['website'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['market'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['territory'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['revenue'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['revenue_year'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['number_of_employees'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['sic_code'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['date_acquired'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['time_zone'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['source_list'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field1'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field2'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field3'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field4'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field5'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field6'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field7'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field8'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field9'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['user_defined_field10'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['billing_address'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['billing_contact'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['tax_code'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['account_number'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["From", "To"];
        if (!in_array($this->container['billing_terms'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['notes'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['sites'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['activities'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['opportunities'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['services'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['projects'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['contacts'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Discard", "Merge"];
        if (!in_array($this->container['documents'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets to_company_id
     * @return int
     */
    public function getToCompanyId()
    {
        return $this->container['to_company_id'];
    }

    /**
     * Sets to_company_id
     * @param int $to_company_id
     * @return $this
     */
    public function setToCompanyId($to_company_id)
    {
        $this->container['to_company_id'] = $to_company_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($name) && (!in_array($name, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'name', must be one of 'From', 'To'");
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets identifier
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     * @param string $identifier
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($identifier) && (!in_array($identifier, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'identifier', must be one of 'From', 'To'");
        }
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($status) && (!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'From', 'To'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($type) && (!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'From', 'To'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets primary_address
     * @return string
     */
    public function getPrimaryAddress()
    {
        return $this->container['primary_address'];
    }

    /**
     * Sets primary_address
     * @param string $primary_address
     * @return $this
     */
    public function setPrimaryAddress($primary_address)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($primary_address) && (!in_array($primary_address, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'primary_address', must be one of 'From', 'To'");
        }
        $this->container['primary_address'] = $primary_address;

        return $this;
    }

    /**
     * Gets primary_contact
     * @return string
     */
    public function getPrimaryContact()
    {
        return $this->container['primary_contact'];
    }

    /**
     * Sets primary_contact
     * @param string $primary_contact
     * @return $this
     */
    public function setPrimaryContact($primary_contact)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($primary_contact) && (!in_array($primary_contact, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'primary_contact', must be one of 'From', 'To'");
        }
        $this->container['primary_contact'] = $primary_contact;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone
     * @return $this
     */
    public function setPhone($phone)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($phone) && (!in_array($phone, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'phone', must be one of 'From', 'To'");
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     * @param string $fax
     * @return $this
     */
    public function setFax($fax)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($fax) && (!in_array($fax, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'fax', must be one of 'From', 'To'");
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets website
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     * @param string $website
     * @return $this
     */
    public function setWebsite($website)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($website) && (!in_array($website, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'website', must be one of 'From', 'To'");
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets market
     * @return string
     */
    public function getMarket()
    {
        return $this->container['market'];
    }

    /**
     * Sets market
     * @param string $market
     * @return $this
     */
    public function setMarket($market)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($market) && (!in_array($market, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'market', must be one of 'From', 'To'");
        }
        $this->container['market'] = $market;

        return $this;
    }

    /**
     * Gets territory
     * @return string
     */
    public function getTerritory()
    {
        return $this->container['territory'];
    }

    /**
     * Sets territory
     * @param string $territory
     * @return $this
     */
    public function setTerritory($territory)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($territory) && (!in_array($territory, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'territory', must be one of 'From', 'To'");
        }
        $this->container['territory'] = $territory;

        return $this;
    }

    /**
     * Gets revenue
     * @return string
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     * @param string $revenue
     * @return $this
     */
    public function setRevenue($revenue)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($revenue) && (!in_array($revenue, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'revenue', must be one of 'From', 'To'");
        }
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets revenue_year
     * @return string
     */
    public function getRevenueYear()
    {
        return $this->container['revenue_year'];
    }

    /**
     * Sets revenue_year
     * @param string $revenue_year
     * @return $this
     */
    public function setRevenueYear($revenue_year)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($revenue_year) && (!in_array($revenue_year, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'revenue_year', must be one of 'From', 'To'");
        }
        $this->container['revenue_year'] = $revenue_year;

        return $this;
    }

    /**
     * Gets number_of_employees
     * @return string
     */
    public function getNumberOfEmployees()
    {
        return $this->container['number_of_employees'];
    }

    /**
     * Sets number_of_employees
     * @param string $number_of_employees
     * @return $this
     */
    public function setNumberOfEmployees($number_of_employees)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($number_of_employees) && (!in_array($number_of_employees, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'number_of_employees', must be one of 'From', 'To'");
        }
        $this->container['number_of_employees'] = $number_of_employees;

        return $this;
    }

    /**
     * Gets sic_code
     * @return string
     */
    public function getSicCode()
    {
        return $this->container['sic_code'];
    }

    /**
     * Sets sic_code
     * @param string $sic_code
     * @return $this
     */
    public function setSicCode($sic_code)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($sic_code) && (!in_array($sic_code, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'sic_code', must be one of 'From', 'To'");
        }
        $this->container['sic_code'] = $sic_code;

        return $this;
    }

    /**
     * Gets date_acquired
     * @return string
     */
    public function getDateAcquired()
    {
        return $this->container['date_acquired'];
    }

    /**
     * Sets date_acquired
     * @param string $date_acquired
     * @return $this
     */
    public function setDateAcquired($date_acquired)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($date_acquired) && (!in_array($date_acquired, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'date_acquired', must be one of 'From', 'To'");
        }
        $this->container['date_acquired'] = $date_acquired;

        return $this;
    }

    /**
     * Gets time_zone
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     * @param string $time_zone
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($time_zone) && (!in_array($time_zone, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'time_zone', must be one of 'From', 'To'");
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets source_list
     * @return string
     */
    public function getSourceList()
    {
        return $this->container['source_list'];
    }

    /**
     * Sets source_list
     * @param string $source_list
     * @return $this
     */
    public function setSourceList($source_list)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($source_list) && (!in_array($source_list, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'source_list', must be one of 'From', 'To'");
        }
        $this->container['source_list'] = $source_list;

        return $this;
    }

    /**
     * Gets user_defined_field1
     * @return string
     */
    public function getUserDefinedField1()
    {
        return $this->container['user_defined_field1'];
    }

    /**
     * Sets user_defined_field1
     * @param string $user_defined_field1
     * @return $this
     */
    public function setUserDefinedField1($user_defined_field1)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($user_defined_field1) && (!in_array($user_defined_field1, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'user_defined_field1', must be one of 'From', 'To'");
        }
        $this->container['user_defined_field1'] = $user_defined_field1;

        return $this;
    }

    /**
     * Gets user_defined_field2
     * @return string
     */
    public function getUserDefinedField2()
    {
        return $this->container['user_defined_field2'];
    }

    /**
     * Sets user_defined_field2
     * @param string $user_defined_field2
     * @return $this
     */
    public function setUserDefinedField2($user_defined_field2)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($user_defined_field2) && (!in_array($user_defined_field2, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'user_defined_field2', must be one of 'From', 'To'");
        }
        $this->container['user_defined_field2'] = $user_defined_field2;

        return $this;
    }

    /**
     * Gets user_defined_field3
     * @return string
     */
    public function getUserDefinedField3()
    {
        return $this->container['user_defined_field3'];
    }

    /**
     * Sets user_defined_field3
     * @param string $user_defined_field3
     * @return $this
     */
    public function setUserDefinedField3($user_defined_field3)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($user_defined_field3) && (!in_array($user_defined_field3, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'user_defined_field3', must be one of 'From', 'To'");
        }
        $this->container['user_defined_field3'] = $user_defined_field3;

        return $this;
    }

    /**
     * Gets user_defined_field4
     * @return string
     */
    public function getUserDefinedField4()
    {
        return $this->container['user_defined_field4'];
    }

    /**
     * Sets user_defined_field4
     * @param string $user_defined_field4
     * @return $this
     */
    public function setUserDefinedField4($user_defined_field4)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($user_defined_field4) && (!in_array($user_defined_field4, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'user_defined_field4', must be one of 'From', 'To'");
        }
        $this->container['user_defined_field4'] = $user_defined_field4;

        return $this;
    }

    /**
     * Gets user_defined_field5
     * @return string
     */
    public function getUserDefinedField5()
    {
        return $this->container['user_defined_field5'];
    }

    /**
     * Sets user_defined_field5
     * @param string $user_defined_field5
     * @return $this
     */
    public function setUserDefinedField5($user_defined_field5)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($user_defined_field5) && (!in_array($user_defined_field5, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'user_defined_field5', must be one of 'From', 'To'");
        }
        $this->container['user_defined_field5'] = $user_defined_field5;

        return $this;
    }

    /**
     * Gets user_defined_field6
     * @return string
     */
    public function getUserDefinedField6()
    {
        return $this->container['user_defined_field6'];
    }

    /**
     * Sets user_defined_field6
     * @param string $user_defined_field6
     * @return $this
     */
    public function setUserDefinedField6($user_defined_field6)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($user_defined_field6) && (!in_array($user_defined_field6, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'user_defined_field6', must be one of 'From', 'To'");
        }
        $this->container['user_defined_field6'] = $user_defined_field6;

        return $this;
    }

    /**
     * Gets user_defined_field7
     * @return string
     */
    public function getUserDefinedField7()
    {
        return $this->container['user_defined_field7'];
    }

    /**
     * Sets user_defined_field7
     * @param string $user_defined_field7
     * @return $this
     */
    public function setUserDefinedField7($user_defined_field7)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($user_defined_field7) && (!in_array($user_defined_field7, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'user_defined_field7', must be one of 'From', 'To'");
        }
        $this->container['user_defined_field7'] = $user_defined_field7;

        return $this;
    }

    /**
     * Gets user_defined_field8
     * @return string
     */
    public function getUserDefinedField8()
    {
        return $this->container['user_defined_field8'];
    }

    /**
     * Sets user_defined_field8
     * @param string $user_defined_field8
     * @return $this
     */
    public function setUserDefinedField8($user_defined_field8)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($user_defined_field8) && (!in_array($user_defined_field8, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'user_defined_field8', must be one of 'From', 'To'");
        }
        $this->container['user_defined_field8'] = $user_defined_field8;

        return $this;
    }

    /**
     * Gets user_defined_field9
     * @return string
     */
    public function getUserDefinedField9()
    {
        return $this->container['user_defined_field9'];
    }

    /**
     * Sets user_defined_field9
     * @param string $user_defined_field9
     * @return $this
     */
    public function setUserDefinedField9($user_defined_field9)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($user_defined_field9) && (!in_array($user_defined_field9, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'user_defined_field9', must be one of 'From', 'To'");
        }
        $this->container['user_defined_field9'] = $user_defined_field9;

        return $this;
    }

    /**
     * Gets user_defined_field10
     * @return string
     */
    public function getUserDefinedField10()
    {
        return $this->container['user_defined_field10'];
    }

    /**
     * Sets user_defined_field10
     * @param string $user_defined_field10
     * @return $this
     */
    public function setUserDefinedField10($user_defined_field10)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($user_defined_field10) && (!in_array($user_defined_field10, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'user_defined_field10', must be one of 'From', 'To'");
        }
        $this->container['user_defined_field10'] = $user_defined_field10;

        return $this;
    }

    /**
     * Gets billing_address
     * @return string
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     * @param string $billing_address
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($billing_address) && (!in_array($billing_address, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'billing_address', must be one of 'From', 'To'");
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets billing_contact
     * @return string
     */
    public function getBillingContact()
    {
        return $this->container['billing_contact'];
    }

    /**
     * Sets billing_contact
     * @param string $billing_contact
     * @return $this
     */
    public function setBillingContact($billing_contact)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($billing_contact) && (!in_array($billing_contact, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'billing_contact', must be one of 'From', 'To'");
        }
        $this->container['billing_contact'] = $billing_contact;

        return $this;
    }

    /**
     * Gets tax_code
     * @return string
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     * @param string $tax_code
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($tax_code) && (!in_array($tax_code, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'tax_code', must be one of 'From', 'To'");
        }
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param string $account_number
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($account_number) && (!in_array($account_number, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'account_number', must be one of 'From', 'To'");
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets billing_terms
     * @return string
     */
    public function getBillingTerms()
    {
        return $this->container['billing_terms'];
    }

    /**
     * Sets billing_terms
     * @param string $billing_terms
     * @return $this
     */
    public function setBillingTerms($billing_terms)
    {
        $allowed_values = array('From', 'To');
        if (!is_null($billing_terms) && (!in_array($billing_terms, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'billing_terms', must be one of 'From', 'To'");
        }
        $this->container['billing_terms'] = $billing_terms;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $allowed_values = array('Discard', 'Merge');
        if (!is_null($notes) && (!in_array($notes, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'notes', must be one of 'Discard', 'Merge'");
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets sites
     * @return string
     */
    public function getSites()
    {
        return $this->container['sites'];
    }

    /**
     * Sets sites
     * @param string $sites
     * @return $this
     */
    public function setSites($sites)
    {
        $allowed_values = array('Discard', 'Merge');
        if (!is_null($sites) && (!in_array($sites, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'sites', must be one of 'Discard', 'Merge'");
        }
        $this->container['sites'] = $sites;

        return $this;
    }

    /**
     * Gets activities
     * @return string
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     * @param string $activities
     * @return $this
     */
    public function setActivities($activities)
    {
        $allowed_values = array('Discard', 'Merge');
        if (!is_null($activities) && (!in_array($activities, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'activities', must be one of 'Discard', 'Merge'");
        }
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets opportunities
     * @return string
     */
    public function getOpportunities()
    {
        return $this->container['opportunities'];
    }

    /**
     * Sets opportunities
     * @param string $opportunities
     * @return $this
     */
    public function setOpportunities($opportunities)
    {
        $allowed_values = array('Discard', 'Merge');
        if (!is_null($opportunities) && (!in_array($opportunities, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'opportunities', must be one of 'Discard', 'Merge'");
        }
        $this->container['opportunities'] = $opportunities;

        return $this;
    }

    /**
     * Gets services
     * @return string
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     * @param string $services
     * @return $this
     */
    public function setServices($services)
    {
        $allowed_values = array('Discard', 'Merge');
        if (!is_null($services) && (!in_array($services, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'services', must be one of 'Discard', 'Merge'");
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets projects
     * @return string
     */
    public function getProjects()
    {
        return $this->container['projects'];
    }

    /**
     * Sets projects
     * @param string $projects
     * @return $this
     */
    public function setProjects($projects)
    {
        $allowed_values = array('Discard', 'Merge');
        if (!is_null($projects) && (!in_array($projects, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'projects', must be one of 'Discard', 'Merge'");
        }
        $this->container['projects'] = $projects;

        return $this;
    }

    /**
     * Gets contacts
     * @return string
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     * @param string $contacts
     * @return $this
     */
    public function setContacts($contacts)
    {
        $allowed_values = array('Discard', 'Merge');
        if (!is_null($contacts) && (!in_array($contacts, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'contacts', must be one of 'Discard', 'Merge'");
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets documents
     * @return string
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     * @param string $documents
     * @return $this
     */
    public function setDocuments($documents)
    {
        $allowed_values = array('Discard', 'Merge');
        if (!is_null($documents) && (!in_array($documents, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'documents', must be one of 'Discard', 'Merge'");
        }
        $this->container['documents'] = $documents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this));
    }
}


