<?php
/**
 * CompanyStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Company
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Company API
 *
 * ConnectWise Company API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model;

use \ArrayAccess;

/**
 * CompanyStatus Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Company
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CompanyStatus implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CompanyStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'default_flag' => 'bool',
        'inactive_flag' => 'bool',
        'notify_flag' => 'bool',
        'disallow_saving_flag' => 'bool',
        'notification_message' => 'string',
        'custom_note_flag' => 'bool',
        'cancel_open_tracks_flag' => 'bool',
        'track' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\TrackReference',
        '_info' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'default_flag' => 'defaultFlag',
        'inactive_flag' => 'inactiveFlag',
        'notify_flag' => 'notifyFlag',
        'disallow_saving_flag' => 'disallowSavingFlag',
        'notification_message' => 'notificationMessage',
        'custom_note_flag' => 'customNoteFlag',
        'cancel_open_tracks_flag' => 'cancelOpenTracksFlag',
        'track' => 'track',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'default_flag' => 'setDefaultFlag',
        'inactive_flag' => 'setInactiveFlag',
        'notify_flag' => 'setNotifyFlag',
        'disallow_saving_flag' => 'setDisallowSavingFlag',
        'notification_message' => 'setNotificationMessage',
        'custom_note_flag' => 'setCustomNoteFlag',
        'cancel_open_tracks_flag' => 'setCancelOpenTracksFlag',
        'track' => 'setTrack',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'default_flag' => 'getDefaultFlag',
        'inactive_flag' => 'getInactiveFlag',
        'notify_flag' => 'getNotifyFlag',
        'disallow_saving_flag' => 'getDisallowSavingFlag',
        'notification_message' => 'getNotificationMessage',
        'custom_note_flag' => 'getCustomNoteFlag',
        'cancel_open_tracks_flag' => 'getCancelOpenTracksFlag',
        'track' => 'getTrack',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['default_flag'] = isset($data['default_flag']) ? $data['default_flag'] : null;
        $this->container['inactive_flag'] = isset($data['inactive_flag']) ? $data['inactive_flag'] : null;
        $this->container['notify_flag'] = isset($data['notify_flag']) ? $data['notify_flag'] : null;
        $this->container['disallow_saving_flag'] = isset($data['disallow_saving_flag']) ? $data['disallow_saving_flag'] : null;
        $this->container['notification_message'] = isset($data['notification_message']) ? $data['notification_message'] : null;
        $this->container['custom_note_flag'] = isset($data['custom_note_flag']) ? $data['custom_note_flag'] : null;
        $this->container['cancel_open_tracks_flag'] = isset($data['cancel_open_tracks_flag']) ? $data['cancel_open_tracks_flag'] : null;
        $this->container['track'] = isset($data['track']) ? $data['track'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 50)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['notification_message']) && (strlen($this->container['notification_message']) > 500)) {
            $invalid_properties[] = "invalid value for 'notification_message', the character length must be smaller than or equal to 500.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 50) {
            return false;
        }
        if (strlen($this->container['notification_message']) > 500) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CompanyStatus., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets default_flag
     * @return bool
     */
    public function getDefaultFlag()
    {
        return $this->container['default_flag'];
    }

    /**
     * Sets default_flag
     * @param bool $default_flag
     * @return $this
     */
    public function setDefaultFlag($default_flag)
    {
        $this->container['default_flag'] = $default_flag;

        return $this;
    }

    /**
     * Gets inactive_flag
     * @return bool
     */
    public function getInactiveFlag()
    {
        return $this->container['inactive_flag'];
    }

    /**
     * Sets inactive_flag
     * @param bool $inactive_flag
     * @return $this
     */
    public function setInactiveFlag($inactive_flag)
    {
        $this->container['inactive_flag'] = $inactive_flag;

        return $this;
    }

    /**
     * Gets notify_flag
     * @return bool
     */
    public function getNotifyFlag()
    {
        return $this->container['notify_flag'];
    }

    /**
     * Sets notify_flag
     * @param bool $notify_flag
     * @return $this
     */
    public function setNotifyFlag($notify_flag)
    {
        $this->container['notify_flag'] = $notify_flag;

        return $this;
    }

    /**
     * Gets disallow_saving_flag
     * @return bool
     */
    public function getDisallowSavingFlag()
    {
        return $this->container['disallow_saving_flag'];
    }

    /**
     * Sets disallow_saving_flag
     * @param bool $disallow_saving_flag
     * @return $this
     */
    public function setDisallowSavingFlag($disallow_saving_flag)
    {
        $this->container['disallow_saving_flag'] = $disallow_saving_flag;

        return $this;
    }

    /**
     * Gets notification_message
     * @return string
     */
    public function getNotificationMessage()
    {
        return $this->container['notification_message'];
    }

    /**
     * Sets notification_message
     * @param string $notification_message
     * @return $this
     */
    public function setNotificationMessage($notification_message)
    {
        if (!is_null($notification_message) && (strlen($notification_message) > 500)) {
            throw new \InvalidArgumentException('invalid length for $notification_message when calling CompanyStatus., must be smaller than or equal to 500.');
        }

        $this->container['notification_message'] = $notification_message;

        return $this;
    }

    /**
     * Gets custom_note_flag
     * @return bool
     */
    public function getCustomNoteFlag()
    {
        return $this->container['custom_note_flag'];
    }

    /**
     * Sets custom_note_flag
     * @param bool $custom_note_flag
     * @return $this
     */
    public function setCustomNoteFlag($custom_note_flag)
    {
        $this->container['custom_note_flag'] = $custom_note_flag;

        return $this;
    }

    /**
     * Gets cancel_open_tracks_flag
     * @return bool
     */
    public function getCancelOpenTracksFlag()
    {
        return $this->container['cancel_open_tracks_flag'];
    }

    /**
     * Sets cancel_open_tracks_flag
     * @param bool $cancel_open_tracks_flag
     * @return $this
     */
    public function setCancelOpenTracksFlag($cancel_open_tracks_flag)
    {
        $this->container['cancel_open_tracks_flag'] = $cancel_open_tracks_flag;

        return $this;
    }

    /**
     * Gets track
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\TrackReference
     */
    public function getTrack()
    {
        return $this->container['track'];
    }

    /**
     * Sets track
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\TrackReference $track
     * @return $this
     */
    public function setTrack($track)
    {
        $this->container['track'] = $track;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this));
    }
}


