<?php
/**
 * ConfigurationQuestion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Company
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Company API
 *
 * ConnectWise Company API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Company\Model;

use \ArrayAccess;

/**
 * ConfigurationQuestion Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Company
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConfigurationQuestion implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ConfigurationQuestion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'answer_id' => 'int',
        'question_id' => 'int',
        'question' => 'string',
        'answer' => 'string',
        'sequence_number' => 'double',
        'number_of_decimals' => 'int',
        'field_type' => 'string',
        'required_flag' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'answer_id' => 'answerId',
        'question_id' => 'questionId',
        'question' => 'question',
        'answer' => 'answer',
        'sequence_number' => 'sequenceNumber',
        'number_of_decimals' => 'numberOfDecimals',
        'field_type' => 'fieldType',
        'required_flag' => 'requiredFlag'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'answer_id' => 'setAnswerId',
        'question_id' => 'setQuestionId',
        'question' => 'setQuestion',
        'answer' => 'setAnswer',
        'sequence_number' => 'setSequenceNumber',
        'number_of_decimals' => 'setNumberOfDecimals',
        'field_type' => 'setFieldType',
        'required_flag' => 'setRequiredFlag'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'answer_id' => 'getAnswerId',
        'question_id' => 'getQuestionId',
        'question' => 'getQuestion',
        'answer' => 'getAnswer',
        'sequence_number' => 'getSequenceNumber',
        'number_of_decimals' => 'getNumberOfDecimals',
        'field_type' => 'getFieldType',
        'required_flag' => 'getRequiredFlag'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const FIELD_TYPE_TEXT = 'Text';
    const FIELD_TYPE_BUTTON = 'Button';
    const FIELD_TYPE_CURRENCY = 'Currency';
    const FIELD_TYPE_DATE = 'Date';
    const FIELD_TYPE_HYPERLINK = 'Hyperlink';
    const FIELD_TYPE_IP_ADDRESS = 'IPAddress';
    const FIELD_TYPE_CHECKBOX = 'Checkbox';
    const FIELD_TYPE_NUMBER = 'Number';
    const FIELD_TYPE_PERCENT = 'Percent';
    const FIELD_TYPE_TEXT_AREA = 'TextArea';
    const FIELD_TYPE_PASSWORD = 'Password';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFieldTypeAllowableValues()
    {
        return [
            self::FIELD_TYPE_TEXT,
            self::FIELD_TYPE_BUTTON,
            self::FIELD_TYPE_CURRENCY,
            self::FIELD_TYPE_DATE,
            self::FIELD_TYPE_HYPERLINK,
            self::FIELD_TYPE_IP_ADDRESS,
            self::FIELD_TYPE_CHECKBOX,
            self::FIELD_TYPE_NUMBER,
            self::FIELD_TYPE_PERCENT,
            self::FIELD_TYPE_TEXT_AREA,
            self::FIELD_TYPE_PASSWORD,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['answer_id'] = isset($data['answer_id']) ? $data['answer_id'] : null;
        $this->container['question_id'] = isset($data['question_id']) ? $data['question_id'] : null;
        $this->container['question'] = isset($data['question']) ? $data['question'] : null;
        $this->container['answer'] = isset($data['answer']) ? $data['answer'] : null;
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['number_of_decimals'] = isset($data['number_of_decimals']) ? $data['number_of_decimals'] : null;
        $this->container['field_type'] = isset($data['field_type']) ? $data['field_type'] : null;
        $this->container['required_flag'] = isset($data['required_flag']) ? $data['required_flag'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["Text", "Button", "Currency", "Date", "Hyperlink", "IPAddress", "Checkbox", "Number", "Percent", "TextArea", "Password"];
        if (!in_array($this->container['field_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'field_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["Text", "Button", "Currency", "Date", "Hyperlink", "IPAddress", "Checkbox", "Number", "Percent", "TextArea", "Password"];
        if (!in_array($this->container['field_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets answer_id
     * @return int
     */
    public function getAnswerId()
    {
        return $this->container['answer_id'];
    }

    /**
     * Sets answer_id
     * @param int $answer_id
     * @return $this
     */
    public function setAnswerId($answer_id)
    {
        $this->container['answer_id'] = $answer_id;

        return $this;
    }

    /**
     * Gets question_id
     * @return int
     */
    public function getQuestionId()
    {
        return $this->container['question_id'];
    }

    /**
     * Sets question_id
     * @param int $question_id
     * @return $this
     */
    public function setQuestionId($question_id)
    {
        $this->container['question_id'] = $question_id;

        return $this;
    }

    /**
     * Gets question
     * @return string
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     * @param string $question
     * @return $this
     */
    public function setQuestion($question)
    {
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets answer
     * @return string
     */
    public function getAnswer()
    {
        return $this->container['answer'];
    }

    /**
     * Sets answer
     * @param string $answer
     * @return $this
     */
    public function setAnswer($answer)
    {
        $this->container['answer'] = $answer;

        return $this;
    }

    /**
     * Gets sequence_number
     * @return double
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     * @param double $sequence_number
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets number_of_decimals
     * @return int
     */
    public function getNumberOfDecimals()
    {
        return $this->container['number_of_decimals'];
    }

    /**
     * Sets number_of_decimals
     * @param int $number_of_decimals
     * @return $this
     */
    public function setNumberOfDecimals($number_of_decimals)
    {
        $this->container['number_of_decimals'] = $number_of_decimals;

        return $this;
    }

    /**
     * Gets field_type
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     * @param string $field_type
     * @return $this
     */
    public function setFieldType($field_type)
    {
        $allowed_values = array('Text', 'Button', 'Currency', 'Date', 'Hyperlink', 'IPAddress', 'Checkbox', 'Number', 'Percent', 'TextArea', 'Password');
        if (!is_null($field_type) && (!in_array($field_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'field_type', must be one of 'Text', 'Button', 'Currency', 'Date', 'Hyperlink', 'IPAddress', 'Checkbox', 'Number', 'Percent', 'TextArea', 'Password'");
        }
        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets required_flag
     * @return bool
     */
    public function getRequiredFlag()
    {
        return $this->container['required_flag'];
    }

    /**
     * Sets required_flag
     * @param bool $required_flag
     * @return $this
     */
    public function setRequiredFlag($required_flag)
    {
        $this->container['required_flag'] = $required_flag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this));
    }
}


