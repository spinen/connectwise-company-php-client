<?php
/**
 * CompanyTeam
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Company
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Company API
 *
 * ConnectWise Company API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Company\Model;

use \ArrayAccess;

/**
 * CompanyTeam Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Company
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CompanyTeam implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CompanyTeam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company' => '\Spinen\ConnectWise\Clients\Company\Model\CompanyReference',
        'team_role' => '\Spinen\ConnectWise\Clients\Company\Model\TeamRoleReference',
        'location_id' => 'int',
        'business_unit_id' => 'int',
        'contact' => '\Spinen\ConnectWise\Clients\Company\Model\ContactReference',
        'member' => '\Spinen\ConnectWise\Clients\Company\Model\MemberReference',
        'account_manager_flag' => 'bool',
        'tech_flag' => 'bool',
        'sales_flag' => 'bool',
        '_info' => '\Spinen\ConnectWise\Clients\Company\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company' => 'company',
        'team_role' => 'teamRole',
        'location_id' => 'locationId',
        'business_unit_id' => 'businessUnitId',
        'contact' => 'contact',
        'member' => 'member',
        'account_manager_flag' => 'accountManagerFlag',
        'tech_flag' => 'techFlag',
        'sales_flag' => 'salesFlag',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company' => 'setCompany',
        'team_role' => 'setTeamRole',
        'location_id' => 'setLocationId',
        'business_unit_id' => 'setBusinessUnitId',
        'contact' => 'setContact',
        'member' => 'setMember',
        'account_manager_flag' => 'setAccountManagerFlag',
        'tech_flag' => 'setTechFlag',
        'sales_flag' => 'setSalesFlag',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company' => 'getCompany',
        'team_role' => 'getTeamRole',
        'location_id' => 'getLocationId',
        'business_unit_id' => 'getBusinessUnitId',
        'contact' => 'getContact',
        'member' => 'getMember',
        'account_manager_flag' => 'getAccountManagerFlag',
        'tech_flag' => 'getTechFlag',
        'sales_flag' => 'getSalesFlag',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['team_role'] = isset($data['team_role']) ? $data['team_role'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['account_manager_flag'] = isset($data['account_manager_flag']) ? $data['account_manager_flag'] : null;
        $this->container['tech_flag'] = isset($data['tech_flag']) ? $data['tech_flag'] : null;
        $this->container['sales_flag'] = isset($data['sales_flag']) ? $data['sales_flag'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['team_role'] === null) {
            $invalid_properties[] = "'team_role' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['team_role'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Company\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Company\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets team_role
     * @return \Spinen\ConnectWise\Clients\Company\Model\TeamRoleReference
     */
    public function getTeamRole()
    {
        return $this->container['team_role'];
    }

    /**
     * Sets team_role
     * @param \Spinen\ConnectWise\Clients\Company\Model\TeamRoleReference $team_role
     * @return $this
     */
    public function setTeamRole($team_role)
    {
        $this->container['team_role'] = $team_role;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets contact
     * @return \Spinen\ConnectWise\Clients\Company\Model\ContactReference
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     * @param \Spinen\ConnectWise\Clients\Company\Model\ContactReference $contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets member
     * @return \Spinen\ConnectWise\Clients\Company\Model\MemberReference
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     * @param \Spinen\ConnectWise\Clients\Company\Model\MemberReference $member
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets account_manager_flag
     * @return bool
     */
    public function getAccountManagerFlag()
    {
        return $this->container['account_manager_flag'];
    }

    /**
     * Sets account_manager_flag
     * @param bool $account_manager_flag
     * @return $this
     */
    public function setAccountManagerFlag($account_manager_flag)
    {
        $this->container['account_manager_flag'] = $account_manager_flag;

        return $this;
    }

    /**
     * Gets tech_flag
     * @return bool
     */
    public function getTechFlag()
    {
        return $this->container['tech_flag'];
    }

    /**
     * Sets tech_flag
     * @param bool $tech_flag
     * @return $this
     */
    public function setTechFlag($tech_flag)
    {
        $this->container['tech_flag'] = $tech_flag;

        return $this;
    }

    /**
     * Gets sales_flag
     * @return bool
     */
    public function getSalesFlag()
    {
        return $this->container['sales_flag'];
    }

    /**
     * Sets sales_flag
     * @param bool $sales_flag
     * @return $this
     */
    public function setSalesFlag($sales_flag)
    {
        $this->container['sales_flag'] = $sales_flag;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Company\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Company\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this));
    }
}


