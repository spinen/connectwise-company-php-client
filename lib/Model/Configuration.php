<?php
/**
 * Configuration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Company
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Company API
 *
 * ConnectWise Company API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model;

use \ArrayAccess;

/**
 * Configuration Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Company
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Configuration implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Configuration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'type' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ConfigurationTypeReference',
        'status' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ConfigurationStatusReference',
        'company' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\CompanyReference',
        'contact' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ContactReference',
        'site' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\SiteReference',
        'location_id' => 'int',
        'business_unit_id' => 'int',
        'device_identifier' => 'string',
        'serial_number' => 'string',
        'model_number' => 'string',
        'tag_number' => 'string',
        'purchase_date' => '\DateTime',
        'installation_date' => '\DateTime',
        'installed_by' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\MemberReference',
        'warranty_expiration_date' => '\DateTime',
        'vendor_notes' => 'string',
        'notes' => 'string',
        'mac_address' => 'string',
        'last_login_name' => 'string',
        'bill_flag' => 'bool',
        'backup_successes' => 'int',
        'backup_incomplete' => 'int',
        'backup_failed' => 'int',
        'backup_restores' => 'int',
        'last_backup_date' => '\DateTime',
        'backup_server_name' => 'string',
        'backup_billable_space_gb' => 'double',
        'backup_protected_device_list' => 'string',
        'backup_year' => 'int',
        'backup_month' => 'int',
        'ip_address' => 'string',
        'default_gateway' => 'string',
        'os_type' => 'string',
        'os_info' => 'string',
        'cpu_speed' => 'string',
        'ram' => 'string',
        'local_hard_drives' => 'string',
        'parent_configuration_id' => 'int',
        'vendor' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\CompanyReference',
        'manufacturer' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ManufacturerReference',
        'questions' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ConfigurationQuestion[]',
        'active_flag' => 'bool',
        'management_link' => 'string',
        'remote_link' => 'string',
        'sla' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\SLAReference',
        'mobile_guid' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\Guid',
        '_info' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\Metadata',
        'display_vendor_flag' => 'bool',
        'custom_fields' => '\Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\CustomFieldValue[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'status' => 'status',
        'company' => 'company',
        'contact' => 'contact',
        'site' => 'site',
        'location_id' => 'locationId',
        'business_unit_id' => 'businessUnitId',
        'device_identifier' => 'deviceIdentifier',
        'serial_number' => 'serialNumber',
        'model_number' => 'modelNumber',
        'tag_number' => 'tagNumber',
        'purchase_date' => 'purchaseDate',
        'installation_date' => 'installationDate',
        'installed_by' => 'installedBy',
        'warranty_expiration_date' => 'warrantyExpirationDate',
        'vendor_notes' => 'vendorNotes',
        'notes' => 'notes',
        'mac_address' => 'macAddress',
        'last_login_name' => 'lastLoginName',
        'bill_flag' => 'billFlag',
        'backup_successes' => 'backupSuccesses',
        'backup_incomplete' => 'backupIncomplete',
        'backup_failed' => 'backupFailed',
        'backup_restores' => 'backupRestores',
        'last_backup_date' => 'lastBackupDate',
        'backup_server_name' => 'backupServerName',
        'backup_billable_space_gb' => 'backupBillableSpaceGb',
        'backup_protected_device_list' => 'backupProtectedDeviceList',
        'backup_year' => 'backupYear',
        'backup_month' => 'backupMonth',
        'ip_address' => 'ipAddress',
        'default_gateway' => 'defaultGateway',
        'os_type' => 'osType',
        'os_info' => 'osInfo',
        'cpu_speed' => 'cpuSpeed',
        'ram' => 'ram',
        'local_hard_drives' => 'localHardDrives',
        'parent_configuration_id' => 'parentConfigurationId',
        'vendor' => 'vendor',
        'manufacturer' => 'manufacturer',
        'questions' => 'questions',
        'active_flag' => 'activeFlag',
        'management_link' => 'managementLink',
        'remote_link' => 'remoteLink',
        'sla' => 'sla',
        'mobile_guid' => 'mobileGuid',
        '_info' => '_info',
        'display_vendor_flag' => 'displayVendorFlag',
        'custom_fields' => 'customFields'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'status' => 'setStatus',
        'company' => 'setCompany',
        'contact' => 'setContact',
        'site' => 'setSite',
        'location_id' => 'setLocationId',
        'business_unit_id' => 'setBusinessUnitId',
        'device_identifier' => 'setDeviceIdentifier',
        'serial_number' => 'setSerialNumber',
        'model_number' => 'setModelNumber',
        'tag_number' => 'setTagNumber',
        'purchase_date' => 'setPurchaseDate',
        'installation_date' => 'setInstallationDate',
        'installed_by' => 'setInstalledBy',
        'warranty_expiration_date' => 'setWarrantyExpirationDate',
        'vendor_notes' => 'setVendorNotes',
        'notes' => 'setNotes',
        'mac_address' => 'setMacAddress',
        'last_login_name' => 'setLastLoginName',
        'bill_flag' => 'setBillFlag',
        'backup_successes' => 'setBackupSuccesses',
        'backup_incomplete' => 'setBackupIncomplete',
        'backup_failed' => 'setBackupFailed',
        'backup_restores' => 'setBackupRestores',
        'last_backup_date' => 'setLastBackupDate',
        'backup_server_name' => 'setBackupServerName',
        'backup_billable_space_gb' => 'setBackupBillableSpaceGb',
        'backup_protected_device_list' => 'setBackupProtectedDeviceList',
        'backup_year' => 'setBackupYear',
        'backup_month' => 'setBackupMonth',
        'ip_address' => 'setIpAddress',
        'default_gateway' => 'setDefaultGateway',
        'os_type' => 'setOsType',
        'os_info' => 'setOsInfo',
        'cpu_speed' => 'setCpuSpeed',
        'ram' => 'setRam',
        'local_hard_drives' => 'setLocalHardDrives',
        'parent_configuration_id' => 'setParentConfigurationId',
        'vendor' => 'setVendor',
        'manufacturer' => 'setManufacturer',
        'questions' => 'setQuestions',
        'active_flag' => 'setActiveFlag',
        'management_link' => 'setManagementLink',
        'remote_link' => 'setRemoteLink',
        'sla' => 'setSla',
        'mobile_guid' => 'setMobileGuid',
        '_info' => 'setInfo',
        'display_vendor_flag' => 'setDisplayVendorFlag',
        'custom_fields' => 'setCustomFields'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'status' => 'getStatus',
        'company' => 'getCompany',
        'contact' => 'getContact',
        'site' => 'getSite',
        'location_id' => 'getLocationId',
        'business_unit_id' => 'getBusinessUnitId',
        'device_identifier' => 'getDeviceIdentifier',
        'serial_number' => 'getSerialNumber',
        'model_number' => 'getModelNumber',
        'tag_number' => 'getTagNumber',
        'purchase_date' => 'getPurchaseDate',
        'installation_date' => 'getInstallationDate',
        'installed_by' => 'getInstalledBy',
        'warranty_expiration_date' => 'getWarrantyExpirationDate',
        'vendor_notes' => 'getVendorNotes',
        'notes' => 'getNotes',
        'mac_address' => 'getMacAddress',
        'last_login_name' => 'getLastLoginName',
        'bill_flag' => 'getBillFlag',
        'backup_successes' => 'getBackupSuccesses',
        'backup_incomplete' => 'getBackupIncomplete',
        'backup_failed' => 'getBackupFailed',
        'backup_restores' => 'getBackupRestores',
        'last_backup_date' => 'getLastBackupDate',
        'backup_server_name' => 'getBackupServerName',
        'backup_billable_space_gb' => 'getBackupBillableSpaceGb',
        'backup_protected_device_list' => 'getBackupProtectedDeviceList',
        'backup_year' => 'getBackupYear',
        'backup_month' => 'getBackupMonth',
        'ip_address' => 'getIpAddress',
        'default_gateway' => 'getDefaultGateway',
        'os_type' => 'getOsType',
        'os_info' => 'getOsInfo',
        'cpu_speed' => 'getCpuSpeed',
        'ram' => 'getRam',
        'local_hard_drives' => 'getLocalHardDrives',
        'parent_configuration_id' => 'getParentConfigurationId',
        'vendor' => 'getVendor',
        'manufacturer' => 'getManufacturer',
        'questions' => 'getQuestions',
        'active_flag' => 'getActiveFlag',
        'management_link' => 'getManagementLink',
        'remote_link' => 'getRemoteLink',
        'sla' => 'getSla',
        'mobile_guid' => 'getMobileGuid',
        '_info' => 'getInfo',
        'display_vendor_flag' => 'getDisplayVendorFlag',
        'custom_fields' => 'getCustomFields'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['device_identifier'] = isset($data['device_identifier']) ? $data['device_identifier'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['model_number'] = isset($data['model_number']) ? $data['model_number'] : null;
        $this->container['tag_number'] = isset($data['tag_number']) ? $data['tag_number'] : null;
        $this->container['purchase_date'] = isset($data['purchase_date']) ? $data['purchase_date'] : null;
        $this->container['installation_date'] = isset($data['installation_date']) ? $data['installation_date'] : null;
        $this->container['installed_by'] = isset($data['installed_by']) ? $data['installed_by'] : null;
        $this->container['warranty_expiration_date'] = isset($data['warranty_expiration_date']) ? $data['warranty_expiration_date'] : null;
        $this->container['vendor_notes'] = isset($data['vendor_notes']) ? $data['vendor_notes'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['mac_address'] = isset($data['mac_address']) ? $data['mac_address'] : null;
        $this->container['last_login_name'] = isset($data['last_login_name']) ? $data['last_login_name'] : null;
        $this->container['bill_flag'] = isset($data['bill_flag']) ? $data['bill_flag'] : null;
        $this->container['backup_successes'] = isset($data['backup_successes']) ? $data['backup_successes'] : null;
        $this->container['backup_incomplete'] = isset($data['backup_incomplete']) ? $data['backup_incomplete'] : null;
        $this->container['backup_failed'] = isset($data['backup_failed']) ? $data['backup_failed'] : null;
        $this->container['backup_restores'] = isset($data['backup_restores']) ? $data['backup_restores'] : null;
        $this->container['last_backup_date'] = isset($data['last_backup_date']) ? $data['last_backup_date'] : null;
        $this->container['backup_server_name'] = isset($data['backup_server_name']) ? $data['backup_server_name'] : null;
        $this->container['backup_billable_space_gb'] = isset($data['backup_billable_space_gb']) ? $data['backup_billable_space_gb'] : null;
        $this->container['backup_protected_device_list'] = isset($data['backup_protected_device_list']) ? $data['backup_protected_device_list'] : null;
        $this->container['backup_year'] = isset($data['backup_year']) ? $data['backup_year'] : null;
        $this->container['backup_month'] = isset($data['backup_month']) ? $data['backup_month'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['default_gateway'] = isset($data['default_gateway']) ? $data['default_gateway'] : null;
        $this->container['os_type'] = isset($data['os_type']) ? $data['os_type'] : null;
        $this->container['os_info'] = isset($data['os_info']) ? $data['os_info'] : null;
        $this->container['cpu_speed'] = isset($data['cpu_speed']) ? $data['cpu_speed'] : null;
        $this->container['ram'] = isset($data['ram']) ? $data['ram'] : null;
        $this->container['local_hard_drives'] = isset($data['local_hard_drives']) ? $data['local_hard_drives'] : null;
        $this->container['parent_configuration_id'] = isset($data['parent_configuration_id']) ? $data['parent_configuration_id'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['questions'] = isset($data['questions']) ? $data['questions'] : null;
        $this->container['active_flag'] = isset($data['active_flag']) ? $data['active_flag'] : null;
        $this->container['management_link'] = isset($data['management_link']) ? $data['management_link'] : null;
        $this->container['remote_link'] = isset($data['remote_link']) ? $data['remote_link'] : null;
        $this->container['sla'] = isset($data['sla']) ? $data['sla'] : null;
        $this->container['mobile_guid'] = isset($data['mobile_guid']) ? $data['mobile_guid'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
        $this->container['display_vendor_flag'] = isset($data['display_vendor_flag']) ? $data['display_vendor_flag'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 100)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['company'] === null) {
            $invalid_properties[] = "'company' can't be null";
        }
        if (!is_null($this->container['device_identifier']) && (strlen($this->container['device_identifier']) > 100)) {
            $invalid_properties[] = "invalid value for 'device_identifier', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['serial_number']) && (strlen($this->container['serial_number']) > 250)) {
            $invalid_properties[] = "invalid value for 'serial_number', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['model_number']) && (strlen($this->container['model_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'model_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['tag_number']) && (strlen($this->container['tag_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'tag_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mac_address']) && (strlen($this->container['mac_address']) > 25)) {
            $invalid_properties[] = "invalid value for 'mac_address', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['last_login_name']) && (strlen($this->container['last_login_name']) > 100)) {
            $invalid_properties[] = "invalid value for 'last_login_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['backup_server_name']) && (strlen($this->container['backup_server_name']) > 50)) {
            $invalid_properties[] = "invalid value for 'backup_server_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ip_address']) && (strlen($this->container['ip_address']) > 50)) {
            $invalid_properties[] = "invalid value for 'ip_address', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['default_gateway']) && (strlen($this->container['default_gateway']) > 50)) {
            $invalid_properties[] = "invalid value for 'default_gateway', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['os_type']) && (strlen($this->container['os_type']) > 250)) {
            $invalid_properties[] = "invalid value for 'os_type', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['os_info']) && (strlen($this->container['os_info']) > 250)) {
            $invalid_properties[] = "invalid value for 'os_info', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['cpu_speed']) && (strlen($this->container['cpu_speed']) > 100)) {
            $invalid_properties[] = "invalid value for 'cpu_speed', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['ram']) && (strlen($this->container['ram']) > 25)) {
            $invalid_properties[] = "invalid value for 'ram', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['management_link']) && (strlen($this->container['management_link']) > 200)) {
            $invalid_properties[] = "invalid value for 'management_link', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['remote_link']) && (strlen($this->container['remote_link']) > 200)) {
            $invalid_properties[] = "invalid value for 'remote_link', the character length must be smaller than or equal to 200.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 100) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['company'] === null) {
            return false;
        }
        if (strlen($this->container['device_identifier']) > 100) {
            return false;
        }
        if (strlen($this->container['serial_number']) > 250) {
            return false;
        }
        if (strlen($this->container['model_number']) > 50) {
            return false;
        }
        if (strlen($this->container['tag_number']) > 50) {
            return false;
        }
        if (strlen($this->container['mac_address']) > 25) {
            return false;
        }
        if (strlen($this->container['last_login_name']) > 100) {
            return false;
        }
        if (strlen($this->container['backup_server_name']) > 50) {
            return false;
        }
        if (strlen($this->container['ip_address']) > 50) {
            return false;
        }
        if (strlen($this->container['default_gateway']) > 50) {
            return false;
        }
        if (strlen($this->container['os_type']) > 250) {
            return false;
        }
        if (strlen($this->container['os_info']) > 250) {
            return false;
        }
        if (strlen($this->container['cpu_speed']) > 100) {
            return false;
        }
        if (strlen($this->container['ram']) > 25) {
            return false;
        }
        if (strlen($this->container['management_link']) > 200) {
            return false;
        }
        if (strlen($this->container['remote_link']) > 200) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Configuration., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ConfigurationTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ConfigurationTypeReference $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ConfigurationStatusReference
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ConfigurationStatusReference $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets contact
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ContactReference
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ContactReference $contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets site
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\SiteReference
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\SiteReference $site
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets device_identifier
     * @return string
     */
    public function getDeviceIdentifier()
    {
        return $this->container['device_identifier'];
    }

    /**
     * Sets device_identifier
     * @param string $device_identifier
     * @return $this
     */
    public function setDeviceIdentifier($device_identifier)
    {
        if (!is_null($device_identifier) && (strlen($device_identifier) > 100)) {
            throw new \InvalidArgumentException('invalid length for $device_identifier when calling Configuration., must be smaller than or equal to 100.');
        }

        $this->container['device_identifier'] = $device_identifier;

        return $this;
    }

    /**
     * Gets serial_number
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     * @param string $serial_number
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        if (!is_null($serial_number) && (strlen($serial_number) > 250)) {
            throw new \InvalidArgumentException('invalid length for $serial_number when calling Configuration., must be smaller than or equal to 250.');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets model_number
     * @return string
     */
    public function getModelNumber()
    {
        return $this->container['model_number'];
    }

    /**
     * Sets model_number
     * @param string $model_number
     * @return $this
     */
    public function setModelNumber($model_number)
    {
        if (!is_null($model_number) && (strlen($model_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $model_number when calling Configuration., must be smaller than or equal to 50.');
        }

        $this->container['model_number'] = $model_number;

        return $this;
    }

    /**
     * Gets tag_number
     * @return string
     */
    public function getTagNumber()
    {
        return $this->container['tag_number'];
    }

    /**
     * Sets tag_number
     * @param string $tag_number
     * @return $this
     */
    public function setTagNumber($tag_number)
    {
        if (!is_null($tag_number) && (strlen($tag_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $tag_number when calling Configuration., must be smaller than or equal to 50.');
        }

        $this->container['tag_number'] = $tag_number;

        return $this;
    }

    /**
     * Gets purchase_date
     * @return \DateTime
     */
    public function getPurchaseDate()
    {
        return $this->container['purchase_date'];
    }

    /**
     * Sets purchase_date
     * @param \DateTime $purchase_date
     * @return $this
     */
    public function setPurchaseDate($purchase_date)
    {
        $this->container['purchase_date'] = $purchase_date;

        return $this;
    }

    /**
     * Gets installation_date
     * @return \DateTime
     */
    public function getInstallationDate()
    {
        return $this->container['installation_date'];
    }

    /**
     * Sets installation_date
     * @param \DateTime $installation_date
     * @return $this
     */
    public function setInstallationDate($installation_date)
    {
        $this->container['installation_date'] = $installation_date;

        return $this;
    }

    /**
     * Gets installed_by
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\MemberReference
     */
    public function getInstalledBy()
    {
        return $this->container['installed_by'];
    }

    /**
     * Sets installed_by
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\MemberReference $installed_by
     * @return $this
     */
    public function setInstalledBy($installed_by)
    {
        $this->container['installed_by'] = $installed_by;

        return $this;
    }

    /**
     * Gets warranty_expiration_date
     * @return \DateTime
     */
    public function getWarrantyExpirationDate()
    {
        return $this->container['warranty_expiration_date'];
    }

    /**
     * Sets warranty_expiration_date
     * @param \DateTime $warranty_expiration_date
     * @return $this
     */
    public function setWarrantyExpirationDate($warranty_expiration_date)
    {
        $this->container['warranty_expiration_date'] = $warranty_expiration_date;

        return $this;
    }

    /**
     * Gets vendor_notes
     * @return string
     */
    public function getVendorNotes()
    {
        return $this->container['vendor_notes'];
    }

    /**
     * Sets vendor_notes
     * @param string $vendor_notes
     * @return $this
     */
    public function setVendorNotes($vendor_notes)
    {
        $this->container['vendor_notes'] = $vendor_notes;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets mac_address
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     * @param string $mac_address
     * @return $this
     */
    public function setMacAddress($mac_address)
    {
        if (!is_null($mac_address) && (strlen($mac_address) > 25)) {
            throw new \InvalidArgumentException('invalid length for $mac_address when calling Configuration., must be smaller than or equal to 25.');
        }

        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets last_login_name
     * @return string
     */
    public function getLastLoginName()
    {
        return $this->container['last_login_name'];
    }

    /**
     * Sets last_login_name
     * @param string $last_login_name
     * @return $this
     */
    public function setLastLoginName($last_login_name)
    {
        if (!is_null($last_login_name) && (strlen($last_login_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $last_login_name when calling Configuration., must be smaller than or equal to 100.');
        }

        $this->container['last_login_name'] = $last_login_name;

        return $this;
    }

    /**
     * Gets bill_flag
     * @return bool
     */
    public function getBillFlag()
    {
        return $this->container['bill_flag'];
    }

    /**
     * Sets bill_flag
     * @param bool $bill_flag
     * @return $this
     */
    public function setBillFlag($bill_flag)
    {
        $this->container['bill_flag'] = $bill_flag;

        return $this;
    }

    /**
     * Gets backup_successes
     * @return int
     */
    public function getBackupSuccesses()
    {
        return $this->container['backup_successes'];
    }

    /**
     * Sets backup_successes
     * @param int $backup_successes
     * @return $this
     */
    public function setBackupSuccesses($backup_successes)
    {
        $this->container['backup_successes'] = $backup_successes;

        return $this;
    }

    /**
     * Gets backup_incomplete
     * @return int
     */
    public function getBackupIncomplete()
    {
        return $this->container['backup_incomplete'];
    }

    /**
     * Sets backup_incomplete
     * @param int $backup_incomplete
     * @return $this
     */
    public function setBackupIncomplete($backup_incomplete)
    {
        $this->container['backup_incomplete'] = $backup_incomplete;

        return $this;
    }

    /**
     * Gets backup_failed
     * @return int
     */
    public function getBackupFailed()
    {
        return $this->container['backup_failed'];
    }

    /**
     * Sets backup_failed
     * @param int $backup_failed
     * @return $this
     */
    public function setBackupFailed($backup_failed)
    {
        $this->container['backup_failed'] = $backup_failed;

        return $this;
    }

    /**
     * Gets backup_restores
     * @return int
     */
    public function getBackupRestores()
    {
        return $this->container['backup_restores'];
    }

    /**
     * Sets backup_restores
     * @param int $backup_restores
     * @return $this
     */
    public function setBackupRestores($backup_restores)
    {
        $this->container['backup_restores'] = $backup_restores;

        return $this;
    }

    /**
     * Gets last_backup_date
     * @return \DateTime
     */
    public function getLastBackupDate()
    {
        return $this->container['last_backup_date'];
    }

    /**
     * Sets last_backup_date
     * @param \DateTime $last_backup_date
     * @return $this
     */
    public function setLastBackupDate($last_backup_date)
    {
        $this->container['last_backup_date'] = $last_backup_date;

        return $this;
    }

    /**
     * Gets backup_server_name
     * @return string
     */
    public function getBackupServerName()
    {
        return $this->container['backup_server_name'];
    }

    /**
     * Sets backup_server_name
     * @param string $backup_server_name
     * @return $this
     */
    public function setBackupServerName($backup_server_name)
    {
        if (!is_null($backup_server_name) && (strlen($backup_server_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $backup_server_name when calling Configuration., must be smaller than or equal to 50.');
        }

        $this->container['backup_server_name'] = $backup_server_name;

        return $this;
    }

    /**
     * Gets backup_billable_space_gb
     * @return double
     */
    public function getBackupBillableSpaceGb()
    {
        return $this->container['backup_billable_space_gb'];
    }

    /**
     * Sets backup_billable_space_gb
     * @param double $backup_billable_space_gb
     * @return $this
     */
    public function setBackupBillableSpaceGb($backup_billable_space_gb)
    {
        $this->container['backup_billable_space_gb'] = $backup_billable_space_gb;

        return $this;
    }

    /**
     * Gets backup_protected_device_list
     * @return string
     */
    public function getBackupProtectedDeviceList()
    {
        return $this->container['backup_protected_device_list'];
    }

    /**
     * Sets backup_protected_device_list
     * @param string $backup_protected_device_list
     * @return $this
     */
    public function setBackupProtectedDeviceList($backup_protected_device_list)
    {
        $this->container['backup_protected_device_list'] = $backup_protected_device_list;

        return $this;
    }

    /**
     * Gets backup_year
     * @return int
     */
    public function getBackupYear()
    {
        return $this->container['backup_year'];
    }

    /**
     * Sets backup_year
     * @param int $backup_year
     * @return $this
     */
    public function setBackupYear($backup_year)
    {
        $this->container['backup_year'] = $backup_year;

        return $this;
    }

    /**
     * Gets backup_month
     * @return int
     */
    public function getBackupMonth()
    {
        return $this->container['backup_month'];
    }

    /**
     * Sets backup_month
     * @param int $backup_month
     * @return $this
     */
    public function setBackupMonth($backup_month)
    {
        $this->container['backup_month'] = $backup_month;

        return $this;
    }

    /**
     * Gets ip_address
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     * @param string $ip_address
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        if (!is_null($ip_address) && (strlen($ip_address) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling Configuration., must be smaller than or equal to 50.');
        }

        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets default_gateway
     * @return string
     */
    public function getDefaultGateway()
    {
        return $this->container['default_gateway'];
    }

    /**
     * Sets default_gateway
     * @param string $default_gateway
     * @return $this
     */
    public function setDefaultGateway($default_gateway)
    {
        if (!is_null($default_gateway) && (strlen($default_gateway) > 50)) {
            throw new \InvalidArgumentException('invalid length for $default_gateway when calling Configuration., must be smaller than or equal to 50.');
        }

        $this->container['default_gateway'] = $default_gateway;

        return $this;
    }

    /**
     * Gets os_type
     * @return string
     */
    public function getOsType()
    {
        return $this->container['os_type'];
    }

    /**
     * Sets os_type
     * @param string $os_type
     * @return $this
     */
    public function setOsType($os_type)
    {
        if (!is_null($os_type) && (strlen($os_type) > 250)) {
            throw new \InvalidArgumentException('invalid length for $os_type when calling Configuration., must be smaller than or equal to 250.');
        }

        $this->container['os_type'] = $os_type;

        return $this;
    }

    /**
     * Gets os_info
     * @return string
     */
    public function getOsInfo()
    {
        return $this->container['os_info'];
    }

    /**
     * Sets os_info
     * @param string $os_info
     * @return $this
     */
    public function setOsInfo($os_info)
    {
        if (!is_null($os_info) && (strlen($os_info) > 250)) {
            throw new \InvalidArgumentException('invalid length for $os_info when calling Configuration., must be smaller than or equal to 250.');
        }

        $this->container['os_info'] = $os_info;

        return $this;
    }

    /**
     * Gets cpu_speed
     * @return string
     */
    public function getCpuSpeed()
    {
        return $this->container['cpu_speed'];
    }

    /**
     * Sets cpu_speed
     * @param string $cpu_speed
     * @return $this
     */
    public function setCpuSpeed($cpu_speed)
    {
        if (!is_null($cpu_speed) && (strlen($cpu_speed) > 100)) {
            throw new \InvalidArgumentException('invalid length for $cpu_speed when calling Configuration., must be smaller than or equal to 100.');
        }

        $this->container['cpu_speed'] = $cpu_speed;

        return $this;
    }

    /**
     * Gets ram
     * @return string
     */
    public function getRam()
    {
        return $this->container['ram'];
    }

    /**
     * Sets ram
     * @param string $ram
     * @return $this
     */
    public function setRam($ram)
    {
        if (!is_null($ram) && (strlen($ram) > 25)) {
            throw new \InvalidArgumentException('invalid length for $ram when calling Configuration., must be smaller than or equal to 25.');
        }

        $this->container['ram'] = $ram;

        return $this;
    }

    /**
     * Gets local_hard_drives
     * @return string
     */
    public function getLocalHardDrives()
    {
        return $this->container['local_hard_drives'];
    }

    /**
     * Sets local_hard_drives
     * @param string $local_hard_drives
     * @return $this
     */
    public function setLocalHardDrives($local_hard_drives)
    {
        $this->container['local_hard_drives'] = $local_hard_drives;

        return $this;
    }

    /**
     * Gets parent_configuration_id
     * @return int
     */
    public function getParentConfigurationId()
    {
        return $this->container['parent_configuration_id'];
    }

    /**
     * Sets parent_configuration_id
     * @param int $parent_configuration_id
     * @return $this
     */
    public function setParentConfigurationId($parent_configuration_id)
    {
        $this->container['parent_configuration_id'] = $parent_configuration_id;

        return $this;
    }

    /**
     * Gets vendor
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\CompanyReference
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\CompanyReference $vendor
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets manufacturer
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ManufacturerReference
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ManufacturerReference $manufacturer
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets questions
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ConfigurationQuestion[]
     */
    public function getQuestions()
    {
        return $this->container['questions'];
    }

    /**
     * Sets questions
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\ConfigurationQuestion[] $questions
     * @return $this
     */
    public function setQuestions($questions)
    {
        $this->container['questions'] = $questions;

        return $this;
    }

    /**
     * Gets active_flag
     * @return bool
     */
    public function getActiveFlag()
    {
        return $this->container['active_flag'];
    }

    /**
     * Sets active_flag
     * @param bool $active_flag
     * @return $this
     */
    public function setActiveFlag($active_flag)
    {
        $this->container['active_flag'] = $active_flag;

        return $this;
    }

    /**
     * Gets management_link
     * @return string
     */
    public function getManagementLink()
    {
        return $this->container['management_link'];
    }

    /**
     * Sets management_link
     * @param string $management_link
     * @return $this
     */
    public function setManagementLink($management_link)
    {
        if (!is_null($management_link) && (strlen($management_link) > 200)) {
            throw new \InvalidArgumentException('invalid length for $management_link when calling Configuration., must be smaller than or equal to 200.');
        }

        $this->container['management_link'] = $management_link;

        return $this;
    }

    /**
     * Gets remote_link
     * @return string
     */
    public function getRemoteLink()
    {
        return $this->container['remote_link'];
    }

    /**
     * Sets remote_link
     * @param string $remote_link
     * @return $this
     */
    public function setRemoteLink($remote_link)
    {
        if (!is_null($remote_link) && (strlen($remote_link) > 200)) {
            throw new \InvalidArgumentException('invalid length for $remote_link when calling Configuration., must be smaller than or equal to 200.');
        }

        $this->container['remote_link'] = $remote_link;

        return $this;
    }

    /**
     * Gets sla
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\SLAReference
     */
    public function getSla()
    {
        return $this->container['sla'];
    }

    /**
     * Sets sla
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\SLAReference $sla
     * @return $this
     */
    public function setSla($sla)
    {
        $this->container['sla'] = $sla;

        return $this;
    }

    /**
     * Gets mobile_guid
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\Guid
     */
    public function getMobileGuid()
    {
        return $this->container['mobile_guid'];
    }

    /**
     * Sets mobile_guid
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\Guid $mobile_guid
     * @return $this
     */
    public function setMobileGuid($mobile_guid)
    {
        $this->container['mobile_guid'] = $mobile_guid;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Gets display_vendor_flag
     * @return bool
     */
    public function getDisplayVendorFlag()
    {
        return $this->container['display_vendor_flag'];
    }

    /**
     * Sets display_vendor_flag
     * @param bool $display_vendor_flag
     * @return $this
     */
    public function setDisplayVendorFlag($display_vendor_flag)
    {
        $this->container['display_vendor_flag'] = $display_vendor_flag;

        return $this;
    }

    /**
     * Gets custom_fields
     * @return \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\CustomFieldValue[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Spinen\ConnectWise\Clients\Company\Spinen\ConnectWise\Clients\Company\Model\CustomFieldValue[] $custom_fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this));
    }
}


