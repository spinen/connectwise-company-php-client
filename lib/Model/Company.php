<?php
/**
 * Company
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Company
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Company API
 *
 * ConnectWise Company API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Company\Model;

use \ArrayAccess;

/**
 * Company Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Company
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Company implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Company';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'identifier' => 'string',
        'name' => 'string',
        'status' => '\Spinen\ConnectWise\Clients\Company\Model\CompanyStatusReference',
        'type' => '\Spinen\ConnectWise\Clients\Company\Model\CompanyTypeReference',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'country' => '\Spinen\ConnectWise\Clients\Company\Model\CountryReference',
        'phone_number' => 'string',
        'fax_number' => 'string',
        'website' => 'string',
        'territory_id' => 'int',
        'market_id' => 'int',
        'account_number' => 'string',
        'default_contact' => '\Spinen\ConnectWise\Clients\Company\Model\ContactReference',
        'date_acquired' => '\DateTime',
        'sic_code' => '\Spinen\ConnectWise\Clients\Company\Model\SicCodeReference',
        'parent_company' => '\Spinen\ConnectWise\Clients\Company\Model\CompanyReference',
        'annual_revenue' => 'double',
        'number_of_employees' => 'int',
        'ownership_type' => '\Spinen\ConnectWise\Clients\Company\Model\OwnershipTypeReference',
        'time_zone' => '\Spinen\ConnectWise\Clients\Company\Model\TimeZoneReference',
        'lead_source' => 'string',
        'lead_flag' => 'bool',
        'unsubscribe_flag' => 'bool',
        'calendar_id' => 'int',
        'user_defined_field1' => 'string',
        'user_defined_field2' => 'string',
        'user_defined_field3' => 'string',
        'user_defined_field4' => 'string',
        'user_defined_field5' => 'string',
        'user_defined_field6' => 'string',
        'user_defined_field7' => 'string',
        'user_defined_field8' => 'string',
        'user_defined_field9' => 'string',
        'user_defined_field10' => 'string',
        'vendor_identifier' => 'string',
        'tax_identifier' => 'string',
        'tax_code' => '\Spinen\ConnectWise\Clients\Company\Model\TaxCodeReference',
        'billing_terms' => '\Spinen\ConnectWise\Clients\Company\Model\BillingTermsReference',
        'invoice_template' => '\Spinen\ConnectWise\Clients\Company\Model\InvoiceTemplateReference',
        'pricing_schedule' => '\Spinen\ConnectWise\Clients\Company\Model\PricingScheduleReference',
        'company_entity_type' => '\Spinen\ConnectWise\Clients\Company\Model\EntityTypeReference',
        'bill_to_company' => '\Spinen\ConnectWise\Clients\Company\Model\CompanyReference',
        'billing_site' => '\Spinen\ConnectWise\Clients\Company\Model\SiteReference',
        'billing_contact' => '\Spinen\ConnectWise\Clients\Company\Model\ContactReference',
        'invoice_delivery_method' => '\Spinen\ConnectWise\Clients\Company\Model\BillingDeliveryReference',
        'invoice_to_email_address' => 'string',
        'invoice_cc_email_address' => 'string',
        'deleted_flag' => 'bool',
        'date_deleted' => '\DateTime',
        'deleted_by' => 'string',
        'mobile_guid' => '\Spinen\ConnectWise\Clients\Company\Model\Guid',
        'currency' => '\Spinen\ConnectWise\Clients\Company\Model\CurrencyReference',
        'territory_manager' => '\Spinen\ConnectWise\Clients\Company\Model\MemberReference',
        '_info' => '\Spinen\ConnectWise\Clients\Company\Model\Metadata',
        'custom_fields' => '\Spinen\ConnectWise\Clients\Company\Model\CustomFieldValue[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identifier' => 'identifier',
        'name' => 'name',
        'status' => 'status',
        'type' => 'type',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'country' => 'country',
        'phone_number' => 'phoneNumber',
        'fax_number' => 'faxNumber',
        'website' => 'website',
        'territory_id' => 'territoryId',
        'market_id' => 'marketId',
        'account_number' => 'accountNumber',
        'default_contact' => 'defaultContact',
        'date_acquired' => 'dateAcquired',
        'sic_code' => 'sicCode',
        'parent_company' => 'parentCompany',
        'annual_revenue' => 'annualRevenue',
        'number_of_employees' => 'numberOfEmployees',
        'ownership_type' => 'ownershipType',
        'time_zone' => 'timeZone',
        'lead_source' => 'leadSource',
        'lead_flag' => 'leadFlag',
        'unsubscribe_flag' => 'unsubscribeFlag',
        'calendar_id' => 'calendarId',
        'user_defined_field1' => 'userDefinedField1',
        'user_defined_field2' => 'userDefinedField2',
        'user_defined_field3' => 'userDefinedField3',
        'user_defined_field4' => 'userDefinedField4',
        'user_defined_field5' => 'userDefinedField5',
        'user_defined_field6' => 'userDefinedField6',
        'user_defined_field7' => 'userDefinedField7',
        'user_defined_field8' => 'userDefinedField8',
        'user_defined_field9' => 'userDefinedField9',
        'user_defined_field10' => 'userDefinedField10',
        'vendor_identifier' => 'vendorIdentifier',
        'tax_identifier' => 'taxIdentifier',
        'tax_code' => 'taxCode',
        'billing_terms' => 'billingTerms',
        'invoice_template' => 'invoiceTemplate',
        'pricing_schedule' => 'pricingSchedule',
        'company_entity_type' => 'companyEntityType',
        'bill_to_company' => 'billToCompany',
        'billing_site' => 'billingSite',
        'billing_contact' => 'billingContact',
        'invoice_delivery_method' => 'invoiceDeliveryMethod',
        'invoice_to_email_address' => 'invoiceToEmailAddress',
        'invoice_cc_email_address' => 'invoiceCCEmailAddress',
        'deleted_flag' => 'deletedFlag',
        'date_deleted' => 'dateDeleted',
        'deleted_by' => 'deletedBy',
        'mobile_guid' => 'mobileGuid',
        'currency' => 'currency',
        'territory_manager' => 'territoryManager',
        '_info' => '_info',
        'custom_fields' => 'customFields'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'name' => 'setName',
        'status' => 'setStatus',
        'type' => 'setType',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'phone_number' => 'setPhoneNumber',
        'fax_number' => 'setFaxNumber',
        'website' => 'setWebsite',
        'territory_id' => 'setTerritoryId',
        'market_id' => 'setMarketId',
        'account_number' => 'setAccountNumber',
        'default_contact' => 'setDefaultContact',
        'date_acquired' => 'setDateAcquired',
        'sic_code' => 'setSicCode',
        'parent_company' => 'setParentCompany',
        'annual_revenue' => 'setAnnualRevenue',
        'number_of_employees' => 'setNumberOfEmployees',
        'ownership_type' => 'setOwnershipType',
        'time_zone' => 'setTimeZone',
        'lead_source' => 'setLeadSource',
        'lead_flag' => 'setLeadFlag',
        'unsubscribe_flag' => 'setUnsubscribeFlag',
        'calendar_id' => 'setCalendarId',
        'user_defined_field1' => 'setUserDefinedField1',
        'user_defined_field2' => 'setUserDefinedField2',
        'user_defined_field3' => 'setUserDefinedField3',
        'user_defined_field4' => 'setUserDefinedField4',
        'user_defined_field5' => 'setUserDefinedField5',
        'user_defined_field6' => 'setUserDefinedField6',
        'user_defined_field7' => 'setUserDefinedField7',
        'user_defined_field8' => 'setUserDefinedField8',
        'user_defined_field9' => 'setUserDefinedField9',
        'user_defined_field10' => 'setUserDefinedField10',
        'vendor_identifier' => 'setVendorIdentifier',
        'tax_identifier' => 'setTaxIdentifier',
        'tax_code' => 'setTaxCode',
        'billing_terms' => 'setBillingTerms',
        'invoice_template' => 'setInvoiceTemplate',
        'pricing_schedule' => 'setPricingSchedule',
        'company_entity_type' => 'setCompanyEntityType',
        'bill_to_company' => 'setBillToCompany',
        'billing_site' => 'setBillingSite',
        'billing_contact' => 'setBillingContact',
        'invoice_delivery_method' => 'setInvoiceDeliveryMethod',
        'invoice_to_email_address' => 'setInvoiceToEmailAddress',
        'invoice_cc_email_address' => 'setInvoiceCcEmailAddress',
        'deleted_flag' => 'setDeletedFlag',
        'date_deleted' => 'setDateDeleted',
        'deleted_by' => 'setDeletedBy',
        'mobile_guid' => 'setMobileGuid',
        'currency' => 'setCurrency',
        'territory_manager' => 'setTerritoryManager',
        '_info' => 'setInfo',
        'custom_fields' => 'setCustomFields'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'name' => 'getName',
        'status' => 'getStatus',
        'type' => 'getType',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'phone_number' => 'getPhoneNumber',
        'fax_number' => 'getFaxNumber',
        'website' => 'getWebsite',
        'territory_id' => 'getTerritoryId',
        'market_id' => 'getMarketId',
        'account_number' => 'getAccountNumber',
        'default_contact' => 'getDefaultContact',
        'date_acquired' => 'getDateAcquired',
        'sic_code' => 'getSicCode',
        'parent_company' => 'getParentCompany',
        'annual_revenue' => 'getAnnualRevenue',
        'number_of_employees' => 'getNumberOfEmployees',
        'ownership_type' => 'getOwnershipType',
        'time_zone' => 'getTimeZone',
        'lead_source' => 'getLeadSource',
        'lead_flag' => 'getLeadFlag',
        'unsubscribe_flag' => 'getUnsubscribeFlag',
        'calendar_id' => 'getCalendarId',
        'user_defined_field1' => 'getUserDefinedField1',
        'user_defined_field2' => 'getUserDefinedField2',
        'user_defined_field3' => 'getUserDefinedField3',
        'user_defined_field4' => 'getUserDefinedField4',
        'user_defined_field5' => 'getUserDefinedField5',
        'user_defined_field6' => 'getUserDefinedField6',
        'user_defined_field7' => 'getUserDefinedField7',
        'user_defined_field8' => 'getUserDefinedField8',
        'user_defined_field9' => 'getUserDefinedField9',
        'user_defined_field10' => 'getUserDefinedField10',
        'vendor_identifier' => 'getVendorIdentifier',
        'tax_identifier' => 'getTaxIdentifier',
        'tax_code' => 'getTaxCode',
        'billing_terms' => 'getBillingTerms',
        'invoice_template' => 'getInvoiceTemplate',
        'pricing_schedule' => 'getPricingSchedule',
        'company_entity_type' => 'getCompanyEntityType',
        'bill_to_company' => 'getBillToCompany',
        'billing_site' => 'getBillingSite',
        'billing_contact' => 'getBillingContact',
        'invoice_delivery_method' => 'getInvoiceDeliveryMethod',
        'invoice_to_email_address' => 'getInvoiceToEmailAddress',
        'invoice_cc_email_address' => 'getInvoiceCcEmailAddress',
        'deleted_flag' => 'getDeletedFlag',
        'date_deleted' => 'getDateDeleted',
        'deleted_by' => 'getDeletedBy',
        'mobile_guid' => 'getMobileGuid',
        'currency' => 'getCurrency',
        'territory_manager' => 'getTerritoryManager',
        '_info' => 'getInfo',
        'custom_fields' => 'getCustomFields'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['territory_id'] = isset($data['territory_id']) ? $data['territory_id'] : null;
        $this->container['market_id'] = isset($data['market_id']) ? $data['market_id'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['default_contact'] = isset($data['default_contact']) ? $data['default_contact'] : null;
        $this->container['date_acquired'] = isset($data['date_acquired']) ? $data['date_acquired'] : null;
        $this->container['sic_code'] = isset($data['sic_code']) ? $data['sic_code'] : null;
        $this->container['parent_company'] = isset($data['parent_company']) ? $data['parent_company'] : null;
        $this->container['annual_revenue'] = isset($data['annual_revenue']) ? $data['annual_revenue'] : null;
        $this->container['number_of_employees'] = isset($data['number_of_employees']) ? $data['number_of_employees'] : null;
        $this->container['ownership_type'] = isset($data['ownership_type']) ? $data['ownership_type'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['lead_source'] = isset($data['lead_source']) ? $data['lead_source'] : null;
        $this->container['lead_flag'] = isset($data['lead_flag']) ? $data['lead_flag'] : null;
        $this->container['unsubscribe_flag'] = isset($data['unsubscribe_flag']) ? $data['unsubscribe_flag'] : null;
        $this->container['calendar_id'] = isset($data['calendar_id']) ? $data['calendar_id'] : null;
        $this->container['user_defined_field1'] = isset($data['user_defined_field1']) ? $data['user_defined_field1'] : null;
        $this->container['user_defined_field2'] = isset($data['user_defined_field2']) ? $data['user_defined_field2'] : null;
        $this->container['user_defined_field3'] = isset($data['user_defined_field3']) ? $data['user_defined_field3'] : null;
        $this->container['user_defined_field4'] = isset($data['user_defined_field4']) ? $data['user_defined_field4'] : null;
        $this->container['user_defined_field5'] = isset($data['user_defined_field5']) ? $data['user_defined_field5'] : null;
        $this->container['user_defined_field6'] = isset($data['user_defined_field6']) ? $data['user_defined_field6'] : null;
        $this->container['user_defined_field7'] = isset($data['user_defined_field7']) ? $data['user_defined_field7'] : null;
        $this->container['user_defined_field8'] = isset($data['user_defined_field8']) ? $data['user_defined_field8'] : null;
        $this->container['user_defined_field9'] = isset($data['user_defined_field9']) ? $data['user_defined_field9'] : null;
        $this->container['user_defined_field10'] = isset($data['user_defined_field10']) ? $data['user_defined_field10'] : null;
        $this->container['vendor_identifier'] = isset($data['vendor_identifier']) ? $data['vendor_identifier'] : null;
        $this->container['tax_identifier'] = isset($data['tax_identifier']) ? $data['tax_identifier'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['billing_terms'] = isset($data['billing_terms']) ? $data['billing_terms'] : null;
        $this->container['invoice_template'] = isset($data['invoice_template']) ? $data['invoice_template'] : null;
        $this->container['pricing_schedule'] = isset($data['pricing_schedule']) ? $data['pricing_schedule'] : null;
        $this->container['company_entity_type'] = isset($data['company_entity_type']) ? $data['company_entity_type'] : null;
        $this->container['bill_to_company'] = isset($data['bill_to_company']) ? $data['bill_to_company'] : null;
        $this->container['billing_site'] = isset($data['billing_site']) ? $data['billing_site'] : null;
        $this->container['billing_contact'] = isset($data['billing_contact']) ? $data['billing_contact'] : null;
        $this->container['invoice_delivery_method'] = isset($data['invoice_delivery_method']) ? $data['invoice_delivery_method'] : null;
        $this->container['invoice_to_email_address'] = isset($data['invoice_to_email_address']) ? $data['invoice_to_email_address'] : null;
        $this->container['invoice_cc_email_address'] = isset($data['invoice_cc_email_address']) ? $data['invoice_cc_email_address'] : null;
        $this->container['deleted_flag'] = isset($data['deleted_flag']) ? $data['deleted_flag'] : null;
        $this->container['date_deleted'] = isset($data['date_deleted']) ? $data['date_deleted'] : null;
        $this->container['deleted_by'] = isset($data['deleted_by']) ? $data['deleted_by'] : null;
        $this->container['mobile_guid'] = isset($data['mobile_guid']) ? $data['mobile_guid'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['territory_manager'] = isset($data['territory_manager']) ? $data['territory_manager'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['identifier'] === null) {
            $invalid_properties[] = "'identifier' can't be null";
        }
        if ((strlen($this->container['identifier']) > 25)) {
            $invalid_properties[] = "invalid value for 'identifier', the character length must be smaller than or equal to 25.";
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 50)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if (!is_null($this->container['address_line1']) && (strlen($this->container['address_line1']) > 50)) {
            $invalid_properties[] = "invalid value for 'address_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address_line2']) && (strlen($this->container['address_line2']) > 50)) {
            $invalid_properties[] = "invalid value for 'address_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (strlen($this->container['city']) > 50)) {
            $invalid_properties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['state']) && (strlen($this->container['state']) > 50)) {
            $invalid_properties[] = "invalid value for 'state', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['zip']) && (strlen($this->container['zip']) > 12)) {
            $invalid_properties[] = "invalid value for 'zip', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['phone_number']) && (strlen($this->container['phone_number']) > 30)) {
            $invalid_properties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['fax_number']) && (strlen($this->container['fax_number']) > 30)) {
            $invalid_properties[] = "invalid value for 'fax_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['website']) && (strlen($this->container['website']) > 255)) {
            $invalid_properties[] = "invalid value for 'website', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['account_number']) && (strlen($this->container['account_number']) > 100)) {
            $invalid_properties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['lead_source']) && (strlen($this->container['lead_source']) > 50)) {
            $invalid_properties[] = "invalid value for 'lead_source', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['user_defined_field1']) && (strlen($this->container['user_defined_field1']) > 50)) {
            $invalid_properties[] = "invalid value for 'user_defined_field1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['user_defined_field2']) && (strlen($this->container['user_defined_field2']) > 50)) {
            $invalid_properties[] = "invalid value for 'user_defined_field2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['user_defined_field3']) && (strlen($this->container['user_defined_field3']) > 50)) {
            $invalid_properties[] = "invalid value for 'user_defined_field3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['user_defined_field4']) && (strlen($this->container['user_defined_field4']) > 50)) {
            $invalid_properties[] = "invalid value for 'user_defined_field4', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['user_defined_field5']) && (strlen($this->container['user_defined_field5']) > 50)) {
            $invalid_properties[] = "invalid value for 'user_defined_field5', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['user_defined_field6']) && (strlen($this->container['user_defined_field6']) > 50)) {
            $invalid_properties[] = "invalid value for 'user_defined_field6', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['user_defined_field7']) && (strlen($this->container['user_defined_field7']) > 50)) {
            $invalid_properties[] = "invalid value for 'user_defined_field7', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['user_defined_field8']) && (strlen($this->container['user_defined_field8']) > 50)) {
            $invalid_properties[] = "invalid value for 'user_defined_field8', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['user_defined_field9']) && (strlen($this->container['user_defined_field9']) > 50)) {
            $invalid_properties[] = "invalid value for 'user_defined_field9', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['user_defined_field10']) && (strlen($this->container['user_defined_field10']) > 50)) {
            $invalid_properties[] = "invalid value for 'user_defined_field10', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['vendor_identifier']) && (strlen($this->container['vendor_identifier']) > 100)) {
            $invalid_properties[] = "invalid value for 'vendor_identifier', the character length must be smaller than or equal to 100.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['identifier'] === null) {
            return false;
        }
        if (strlen($this->container['identifier']) > 25) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 50) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if (strlen($this->container['address_line1']) > 50) {
            return false;
        }
        if (strlen($this->container['address_line2']) > 50) {
            return false;
        }
        if (strlen($this->container['city']) > 50) {
            return false;
        }
        if (strlen($this->container['state']) > 50) {
            return false;
        }
        if (strlen($this->container['zip']) > 12) {
            return false;
        }
        if (strlen($this->container['phone_number']) > 30) {
            return false;
        }
        if (strlen($this->container['fax_number']) > 30) {
            return false;
        }
        if (strlen($this->container['website']) > 255) {
            return false;
        }
        if (strlen($this->container['account_number']) > 100) {
            return false;
        }
        if (strlen($this->container['lead_source']) > 50) {
            return false;
        }
        if (strlen($this->container['user_defined_field1']) > 50) {
            return false;
        }
        if (strlen($this->container['user_defined_field2']) > 50) {
            return false;
        }
        if (strlen($this->container['user_defined_field3']) > 50) {
            return false;
        }
        if (strlen($this->container['user_defined_field4']) > 50) {
            return false;
        }
        if (strlen($this->container['user_defined_field5']) > 50) {
            return false;
        }
        if (strlen($this->container['user_defined_field6']) > 50) {
            return false;
        }
        if (strlen($this->container['user_defined_field7']) > 50) {
            return false;
        }
        if (strlen($this->container['user_defined_field8']) > 50) {
            return false;
        }
        if (strlen($this->container['user_defined_field9']) > 50) {
            return false;
        }
        if (strlen($this->container['user_defined_field10']) > 50) {
            return false;
        }
        if (strlen($this->container['vendor_identifier']) > 100) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     * @param string $identifier
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        if ((strlen($identifier) > 25)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling Company., must be smaller than or equal to 25.');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     * @return \Spinen\ConnectWise\Clients\Company\Model\CompanyStatusReference
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Spinen\ConnectWise\Clients\Company\Model\CompanyStatusReference $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     * @return \Spinen\ConnectWise\Clients\Company\Model\CompanyTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Spinen\ConnectWise\Clients\Company\Model\CompanyTypeReference $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets address_line1
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     * @param string $address_line1 At least one address field is required -- addressLine1, addressLine2, city, state, and/or zip
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        if (!is_null($address_line1) && (strlen($address_line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     * @param string $address_line2 At least one address field is required -- addressLine1, addressLine2, city, state, and/or zip
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        if (!is_null($address_line2) && (strlen($address_line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city At least one address field is required -- addressLine1, addressLine2, city, state, and/or zip
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state At least one address field is required -- addressLine1, addressLine2, city, state, and/or zip
     * @return $this
     */
    public function setState($state)
    {
        if (!is_null($state) && (strlen($state) > 50)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip At least one address field is required -- addressLine1, addressLine2, city, state, and/or zip
     * @return $this
     */
    public function setZip($zip)
    {
        if (!is_null($zip) && (strlen($zip) > 12)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling Company., must be smaller than or equal to 12.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     * @return \Spinen\ConnectWise\Clients\Company\Model\CountryReference
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param \Spinen\ConnectWise\Clients\Company\Model\CountryReference $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone_number
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     * @param string $phone_number
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (strlen($phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Company., must be smaller than or equal to 30.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     * @param string $fax_number
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        if (!is_null($fax_number) && (strlen($fax_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling Company., must be smaller than or equal to 30.');
        }

        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets website
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     * @param string $website
     * @return $this
     */
    public function setWebsite($website)
    {
        if (!is_null($website) && (strlen($website) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website when calling Company., must be smaller than or equal to 255.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets territory_id
     * @return int
     */
    public function getTerritoryId()
    {
        return $this->container['territory_id'];
    }

    /**
     * Sets territory_id
     * @param int $territory_id
     * @return $this
     */
    public function setTerritoryId($territory_id)
    {
        $this->container['territory_id'] = $territory_id;

        return $this;
    }

    /**
     * Gets market_id
     * @return int
     */
    public function getMarketId()
    {
        return $this->container['market_id'];
    }

    /**
     * Sets market_id
     * @param int $market_id
     * @return $this
     */
    public function setMarketId($market_id)
    {
        $this->container['market_id'] = $market_id;

        return $this;
    }

    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param string $account_number
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        if (!is_null($account_number) && (strlen($account_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling Company., must be smaller than or equal to 100.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets default_contact
     * @return \Spinen\ConnectWise\Clients\Company\Model\ContactReference
     */
    public function getDefaultContact()
    {
        return $this->container['default_contact'];
    }

    /**
     * Sets default_contact
     * @param \Spinen\ConnectWise\Clients\Company\Model\ContactReference $default_contact
     * @return $this
     */
    public function setDefaultContact($default_contact)
    {
        $this->container['default_contact'] = $default_contact;

        return $this;
    }

    /**
     * Gets date_acquired
     * @return \DateTime
     */
    public function getDateAcquired()
    {
        return $this->container['date_acquired'];
    }

    /**
     * Sets date_acquired
     * @param \DateTime $date_acquired
     * @return $this
     */
    public function setDateAcquired($date_acquired)
    {
        $this->container['date_acquired'] = $date_acquired;

        return $this;
    }

    /**
     * Gets sic_code
     * @return \Spinen\ConnectWise\Clients\Company\Model\SicCodeReference
     */
    public function getSicCode()
    {
        return $this->container['sic_code'];
    }

    /**
     * Sets sic_code
     * @param \Spinen\ConnectWise\Clients\Company\Model\SicCodeReference $sic_code
     * @return $this
     */
    public function setSicCode($sic_code)
    {
        $this->container['sic_code'] = $sic_code;

        return $this;
    }

    /**
     * Gets parent_company
     * @return \Spinen\ConnectWise\Clients\Company\Model\CompanyReference
     */
    public function getParentCompany()
    {
        return $this->container['parent_company'];
    }

    /**
     * Sets parent_company
     * @param \Spinen\ConnectWise\Clients\Company\Model\CompanyReference $parent_company
     * @return $this
     */
    public function setParentCompany($parent_company)
    {
        $this->container['parent_company'] = $parent_company;

        return $this;
    }

    /**
     * Gets annual_revenue
     * @return double
     */
    public function getAnnualRevenue()
    {
        return $this->container['annual_revenue'];
    }

    /**
     * Sets annual_revenue
     * @param double $annual_revenue
     * @return $this
     */
    public function setAnnualRevenue($annual_revenue)
    {
        $this->container['annual_revenue'] = $annual_revenue;

        return $this;
    }

    /**
     * Gets number_of_employees
     * @return int
     */
    public function getNumberOfEmployees()
    {
        return $this->container['number_of_employees'];
    }

    /**
     * Sets number_of_employees
     * @param int $number_of_employees
     * @return $this
     */
    public function setNumberOfEmployees($number_of_employees)
    {
        $this->container['number_of_employees'] = $number_of_employees;

        return $this;
    }

    /**
     * Gets ownership_type
     * @return \Spinen\ConnectWise\Clients\Company\Model\OwnershipTypeReference
     */
    public function getOwnershipType()
    {
        return $this->container['ownership_type'];
    }

    /**
     * Sets ownership_type
     * @param \Spinen\ConnectWise\Clients\Company\Model\OwnershipTypeReference $ownership_type
     * @return $this
     */
    public function setOwnershipType($ownership_type)
    {
        $this->container['ownership_type'] = $ownership_type;

        return $this;
    }

    /**
     * Gets time_zone
     * @return \Spinen\ConnectWise\Clients\Company\Model\TimeZoneReference
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     * @param \Spinen\ConnectWise\Clients\Company\Model\TimeZoneReference $time_zone
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets lead_source
     * @return string
     */
    public function getLeadSource()
    {
        return $this->container['lead_source'];
    }

    /**
     * Sets lead_source
     * @param string $lead_source
     * @return $this
     */
    public function setLeadSource($lead_source)
    {
        if (!is_null($lead_source) && (strlen($lead_source) > 50)) {
            throw new \InvalidArgumentException('invalid length for $lead_source when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['lead_source'] = $lead_source;

        return $this;
    }

    /**
     * Gets lead_flag
     * @return bool
     */
    public function getLeadFlag()
    {
        return $this->container['lead_flag'];
    }

    /**
     * Sets lead_flag
     * @param bool $lead_flag
     * @return $this
     */
    public function setLeadFlag($lead_flag)
    {
        $this->container['lead_flag'] = $lead_flag;

        return $this;
    }

    /**
     * Gets unsubscribe_flag
     * @return bool
     */
    public function getUnsubscribeFlag()
    {
        return $this->container['unsubscribe_flag'];
    }

    /**
     * Sets unsubscribe_flag
     * @param bool $unsubscribe_flag
     * @return $this
     */
    public function setUnsubscribeFlag($unsubscribe_flag)
    {
        $this->container['unsubscribe_flag'] = $unsubscribe_flag;

        return $this;
    }

    /**
     * Gets calendar_id
     * @return int
     */
    public function getCalendarId()
    {
        return $this->container['calendar_id'];
    }

    /**
     * Sets calendar_id
     * @param int $calendar_id
     * @return $this
     */
    public function setCalendarId($calendar_id)
    {
        $this->container['calendar_id'] = $calendar_id;

        return $this;
    }

    /**
     * Gets user_defined_field1
     * @return string
     */
    public function getUserDefinedField1()
    {
        return $this->container['user_defined_field1'];
    }

    /**
     * Sets user_defined_field1
     * @param string $user_defined_field1
     * @return $this
     */
    public function setUserDefinedField1($user_defined_field1)
    {
        if (!is_null($user_defined_field1) && (strlen($user_defined_field1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_defined_field1 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['user_defined_field1'] = $user_defined_field1;

        return $this;
    }

    /**
     * Gets user_defined_field2
     * @return string
     */
    public function getUserDefinedField2()
    {
        return $this->container['user_defined_field2'];
    }

    /**
     * Sets user_defined_field2
     * @param string $user_defined_field2
     * @return $this
     */
    public function setUserDefinedField2($user_defined_field2)
    {
        if (!is_null($user_defined_field2) && (strlen($user_defined_field2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_defined_field2 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['user_defined_field2'] = $user_defined_field2;

        return $this;
    }

    /**
     * Gets user_defined_field3
     * @return string
     */
    public function getUserDefinedField3()
    {
        return $this->container['user_defined_field3'];
    }

    /**
     * Sets user_defined_field3
     * @param string $user_defined_field3
     * @return $this
     */
    public function setUserDefinedField3($user_defined_field3)
    {
        if (!is_null($user_defined_field3) && (strlen($user_defined_field3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_defined_field3 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['user_defined_field3'] = $user_defined_field3;

        return $this;
    }

    /**
     * Gets user_defined_field4
     * @return string
     */
    public function getUserDefinedField4()
    {
        return $this->container['user_defined_field4'];
    }

    /**
     * Sets user_defined_field4
     * @param string $user_defined_field4
     * @return $this
     */
    public function setUserDefinedField4($user_defined_field4)
    {
        if (!is_null($user_defined_field4) && (strlen($user_defined_field4) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_defined_field4 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['user_defined_field4'] = $user_defined_field4;

        return $this;
    }

    /**
     * Gets user_defined_field5
     * @return string
     */
    public function getUserDefinedField5()
    {
        return $this->container['user_defined_field5'];
    }

    /**
     * Sets user_defined_field5
     * @param string $user_defined_field5
     * @return $this
     */
    public function setUserDefinedField5($user_defined_field5)
    {
        if (!is_null($user_defined_field5) && (strlen($user_defined_field5) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_defined_field5 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['user_defined_field5'] = $user_defined_field5;

        return $this;
    }

    /**
     * Gets user_defined_field6
     * @return string
     */
    public function getUserDefinedField6()
    {
        return $this->container['user_defined_field6'];
    }

    /**
     * Sets user_defined_field6
     * @param string $user_defined_field6
     * @return $this
     */
    public function setUserDefinedField6($user_defined_field6)
    {
        if (!is_null($user_defined_field6) && (strlen($user_defined_field6) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_defined_field6 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['user_defined_field6'] = $user_defined_field6;

        return $this;
    }

    /**
     * Gets user_defined_field7
     * @return string
     */
    public function getUserDefinedField7()
    {
        return $this->container['user_defined_field7'];
    }

    /**
     * Sets user_defined_field7
     * @param string $user_defined_field7
     * @return $this
     */
    public function setUserDefinedField7($user_defined_field7)
    {
        if (!is_null($user_defined_field7) && (strlen($user_defined_field7) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_defined_field7 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['user_defined_field7'] = $user_defined_field7;

        return $this;
    }

    /**
     * Gets user_defined_field8
     * @return string
     */
    public function getUserDefinedField8()
    {
        return $this->container['user_defined_field8'];
    }

    /**
     * Sets user_defined_field8
     * @param string $user_defined_field8
     * @return $this
     */
    public function setUserDefinedField8($user_defined_field8)
    {
        if (!is_null($user_defined_field8) && (strlen($user_defined_field8) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_defined_field8 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['user_defined_field8'] = $user_defined_field8;

        return $this;
    }

    /**
     * Gets user_defined_field9
     * @return string
     */
    public function getUserDefinedField9()
    {
        return $this->container['user_defined_field9'];
    }

    /**
     * Sets user_defined_field9
     * @param string $user_defined_field9
     * @return $this
     */
    public function setUserDefinedField9($user_defined_field9)
    {
        if (!is_null($user_defined_field9) && (strlen($user_defined_field9) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_defined_field9 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['user_defined_field9'] = $user_defined_field9;

        return $this;
    }

    /**
     * Gets user_defined_field10
     * @return string
     */
    public function getUserDefinedField10()
    {
        return $this->container['user_defined_field10'];
    }

    /**
     * Sets user_defined_field10
     * @param string $user_defined_field10
     * @return $this
     */
    public function setUserDefinedField10($user_defined_field10)
    {
        if (!is_null($user_defined_field10) && (strlen($user_defined_field10) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_defined_field10 when calling Company., must be smaller than or equal to 50.');
        }

        $this->container['user_defined_field10'] = $user_defined_field10;

        return $this;
    }

    /**
     * Gets vendor_identifier
     * @return string
     */
    public function getVendorIdentifier()
    {
        return $this->container['vendor_identifier'];
    }

    /**
     * Sets vendor_identifier
     * @param string $vendor_identifier
     * @return $this
     */
    public function setVendorIdentifier($vendor_identifier)
    {
        if (!is_null($vendor_identifier) && (strlen($vendor_identifier) > 100)) {
            throw new \InvalidArgumentException('invalid length for $vendor_identifier when calling Company., must be smaller than or equal to 100.');
        }

        $this->container['vendor_identifier'] = $vendor_identifier;

        return $this;
    }

    /**
     * Gets tax_identifier
     * @return string
     */
    public function getTaxIdentifier()
    {
        return $this->container['tax_identifier'];
    }

    /**
     * Sets tax_identifier
     * @param string $tax_identifier
     * @return $this
     */
    public function setTaxIdentifier($tax_identifier)
    {
        $this->container['tax_identifier'] = $tax_identifier;

        return $this;
    }

    /**
     * Gets tax_code
     * @return \Spinen\ConnectWise\Clients\Company\Model\TaxCodeReference
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     * @param \Spinen\ConnectWise\Clients\Company\Model\TaxCodeReference $tax_code New companies will be created with the default tax code unless otherwise specified.
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets billing_terms
     * @return \Spinen\ConnectWise\Clients\Company\Model\BillingTermsReference
     */
    public function getBillingTerms()
    {
        return $this->container['billing_terms'];
    }

    /**
     * Sets billing_terms
     * @param \Spinen\ConnectWise\Clients\Company\Model\BillingTermsReference $billing_terms
     * @return $this
     */
    public function setBillingTerms($billing_terms)
    {
        $this->container['billing_terms'] = $billing_terms;

        return $this;
    }

    /**
     * Gets invoice_template
     * @return \Spinen\ConnectWise\Clients\Company\Model\InvoiceTemplateReference
     */
    public function getInvoiceTemplate()
    {
        return $this->container['invoice_template'];
    }

    /**
     * Sets invoice_template
     * @param \Spinen\ConnectWise\Clients\Company\Model\InvoiceTemplateReference $invoice_template
     * @return $this
     */
    public function setInvoiceTemplate($invoice_template)
    {
        $this->container['invoice_template'] = $invoice_template;

        return $this;
    }

    /**
     * Gets pricing_schedule
     * @return \Spinen\ConnectWise\Clients\Company\Model\PricingScheduleReference
     */
    public function getPricingSchedule()
    {
        return $this->container['pricing_schedule'];
    }

    /**
     * Sets pricing_schedule
     * @param \Spinen\ConnectWise\Clients\Company\Model\PricingScheduleReference $pricing_schedule
     * @return $this
     */
    public function setPricingSchedule($pricing_schedule)
    {
        $this->container['pricing_schedule'] = $pricing_schedule;

        return $this;
    }

    /**
     * Gets company_entity_type
     * @return \Spinen\ConnectWise\Clients\Company\Model\EntityTypeReference
     */
    public function getCompanyEntityType()
    {
        return $this->container['company_entity_type'];
    }

    /**
     * Sets company_entity_type
     * @param \Spinen\ConnectWise\Clients\Company\Model\EntityTypeReference $company_entity_type Based on CompanyEntityType Report
     * @return $this
     */
    public function setCompanyEntityType($company_entity_type)
    {
        $this->container['company_entity_type'] = $company_entity_type;

        return $this;
    }

    /**
     * Gets bill_to_company
     * @return \Spinen\ConnectWise\Clients\Company\Model\CompanyReference
     */
    public function getBillToCompany()
    {
        return $this->container['bill_to_company'];
    }

    /**
     * Sets bill_to_company
     * @param \Spinen\ConnectWise\Clients\Company\Model\CompanyReference $bill_to_company
     * @return $this
     */
    public function setBillToCompany($bill_to_company)
    {
        $this->container['bill_to_company'] = $bill_to_company;

        return $this;
    }

    /**
     * Gets billing_site
     * @return \Spinen\ConnectWise\Clients\Company\Model\SiteReference
     */
    public function getBillingSite()
    {
        return $this->container['billing_site'];
    }

    /**
     * Sets billing_site
     * @param \Spinen\ConnectWise\Clients\Company\Model\SiteReference $billing_site
     * @return $this
     */
    public function setBillingSite($billing_site)
    {
        $this->container['billing_site'] = $billing_site;

        return $this;
    }

    /**
     * Gets billing_contact
     * @return \Spinen\ConnectWise\Clients\Company\Model\ContactReference
     */
    public function getBillingContact()
    {
        return $this->container['billing_contact'];
    }

    /**
     * Sets billing_contact
     * @param \Spinen\ConnectWise\Clients\Company\Model\ContactReference $billing_contact
     * @return $this
     */
    public function setBillingContact($billing_contact)
    {
        $this->container['billing_contact'] = $billing_contact;

        return $this;
    }

    /**
     * Gets invoice_delivery_method
     * @return \Spinen\ConnectWise\Clients\Company\Model\BillingDeliveryReference
     */
    public function getInvoiceDeliveryMethod()
    {
        return $this->container['invoice_delivery_method'];
    }

    /**
     * Sets invoice_delivery_method
     * @param \Spinen\ConnectWise\Clients\Company\Model\BillingDeliveryReference $invoice_delivery_method
     * @return $this
     */
    public function setInvoiceDeliveryMethod($invoice_delivery_method)
    {
        $this->container['invoice_delivery_method'] = $invoice_delivery_method;

        return $this;
    }

    /**
     * Gets invoice_to_email_address
     * @return string
     */
    public function getInvoiceToEmailAddress()
    {
        return $this->container['invoice_to_email_address'];
    }

    /**
     * Sets invoice_to_email_address
     * @param string $invoice_to_email_address
     * @return $this
     */
    public function setInvoiceToEmailAddress($invoice_to_email_address)
    {
        $this->container['invoice_to_email_address'] = $invoice_to_email_address;

        return $this;
    }

    /**
     * Gets invoice_cc_email_address
     * @return string
     */
    public function getInvoiceCcEmailAddress()
    {
        return $this->container['invoice_cc_email_address'];
    }

    /**
     * Sets invoice_cc_email_address
     * @param string $invoice_cc_email_address
     * @return $this
     */
    public function setInvoiceCcEmailAddress($invoice_cc_email_address)
    {
        $this->container['invoice_cc_email_address'] = $invoice_cc_email_address;

        return $this;
    }

    /**
     * Gets deleted_flag
     * @return bool
     */
    public function getDeletedFlag()
    {
        return $this->container['deleted_flag'];
    }

    /**
     * Sets deleted_flag
     * @param bool $deleted_flag
     * @return $this
     */
    public function setDeletedFlag($deleted_flag)
    {
        $this->container['deleted_flag'] = $deleted_flag;

        return $this;
    }

    /**
     * Gets date_deleted
     * @return \DateTime
     */
    public function getDateDeleted()
    {
        return $this->container['date_deleted'];
    }

    /**
     * Sets date_deleted
     * @param \DateTime $date_deleted
     * @return $this
     */
    public function setDateDeleted($date_deleted)
    {
        $this->container['date_deleted'] = $date_deleted;

        return $this;
    }

    /**
     * Gets deleted_by
     * @return string
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     * @param string $deleted_by
     * @return $this
     */
    public function setDeletedBy($deleted_by)
    {
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets mobile_guid
     * @return \Spinen\ConnectWise\Clients\Company\Model\Guid
     */
    public function getMobileGuid()
    {
        return $this->container['mobile_guid'];
    }

    /**
     * Sets mobile_guid
     * @param \Spinen\ConnectWise\Clients\Company\Model\Guid $mobile_guid
     * @return $this
     */
    public function setMobileGuid($mobile_guid)
    {
        $this->container['mobile_guid'] = $mobile_guid;

        return $this;
    }

    /**
     * Gets currency
     * @return \Spinen\ConnectWise\Clients\Company\Model\CurrencyReference
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param \Spinen\ConnectWise\Clients\Company\Model\CurrencyReference $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets territory_manager
     * @return \Spinen\ConnectWise\Clients\Company\Model\MemberReference
     */
    public function getTerritoryManager()
    {
        return $this->container['territory_manager'];
    }

    /**
     * Sets territory_manager
     * @param \Spinen\ConnectWise\Clients\Company\Model\MemberReference $territory_manager
     * @return $this
     */
    public function setTerritoryManager($territory_manager)
    {
        $this->container['territory_manager'] = $territory_manager;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Company\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Company\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Gets custom_fields
     * @return \Spinen\ConnectWise\Clients\Company\Model\CustomFieldValue[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Spinen\ConnectWise\Clients\Company\Model\CustomFieldValue[] $custom_fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this));
    }
}


