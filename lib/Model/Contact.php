<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Company
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Company API
 *
 * ConnectWise Company API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Company\Model;

use \ArrayAccess;

/**
 * Contact Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Company
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Contact implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'type' => '\Spinen\ConnectWise\Clients\Company\Model\ContactTypeReference',
        'company' => '\Spinen\ConnectWise\Clients\Company\Model\CompanyReference',
        'site' => '\Spinen\ConnectWise\Clients\Company\Model\SiteReference',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'country' => 'string',
        'relationship' => '\Spinen\ConnectWise\Clients\Company\Model\RelationshipReference',
        'department' => '\Spinen\ConnectWise\Clients\Company\Model\ContactDepartmentReference',
        'inactive_flag' => 'bool',
        'default_merge_contact_id' => 'int',
        'security_identifier' => 'string',
        'manager_contact_id' => 'int',
        'assistant_contact_id' => 'int',
        'title' => 'string',
        'school' => 'string',
        'nick_name' => 'string',
        'married_flag' => 'bool',
        'children_flag' => 'bool',
        'significant_other' => 'string',
        'portal_password' => 'string',
        'portal_security_level' => 'int',
        'disable_portal_login_flag' => 'bool',
        'unsubscribe_flag' => 'bool',
        'gender' => 'string',
        'birth_day' => '\DateTime',
        'anniversary' => '\DateTime',
        'presence' => 'string',
        'mobile_guid' => '\Spinen\ConnectWise\Clients\Company\Model\Guid',
        'facebook_url' => 'string',
        'twitter_url' => 'string',
        'linked_in_url' => 'string',
        'default_billing_flag' => 'bool',
        'communication_items' => '\Spinen\ConnectWise\Clients\Company\Model\ContactCommunicationItem[]',
        '_info' => '\Spinen\ConnectWise\Clients\Company\Model\Metadata',
        'custom_fields' => '\Spinen\ConnectWise\Clients\Company\Model\CustomFieldValue[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'type' => 'type',
        'company' => 'company',
        'site' => 'site',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'country' => 'country',
        'relationship' => 'relationship',
        'department' => 'department',
        'inactive_flag' => 'inactiveFlag',
        'default_merge_contact_id' => 'defaultMergeContactId',
        'security_identifier' => 'securityIdentifier',
        'manager_contact_id' => 'managerContactId',
        'assistant_contact_id' => 'assistantContactId',
        'title' => 'title',
        'school' => 'school',
        'nick_name' => 'nickName',
        'married_flag' => 'marriedFlag',
        'children_flag' => 'childrenFlag',
        'significant_other' => 'significantOther',
        'portal_password' => 'portalPassword',
        'portal_security_level' => 'portalSecurityLevel',
        'disable_portal_login_flag' => 'disablePortalLoginFlag',
        'unsubscribe_flag' => 'unsubscribeFlag',
        'gender' => 'gender',
        'birth_day' => 'birthDay',
        'anniversary' => 'anniversary',
        'presence' => 'presence',
        'mobile_guid' => 'mobileGuid',
        'facebook_url' => 'facebookUrl',
        'twitter_url' => 'twitterUrl',
        'linked_in_url' => 'linkedInUrl',
        'default_billing_flag' => 'defaultBillingFlag',
        'communication_items' => 'communicationItems',
        '_info' => '_info',
        'custom_fields' => 'customFields'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'type' => 'setType',
        'company' => 'setCompany',
        'site' => 'setSite',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'relationship' => 'setRelationship',
        'department' => 'setDepartment',
        'inactive_flag' => 'setInactiveFlag',
        'default_merge_contact_id' => 'setDefaultMergeContactId',
        'security_identifier' => 'setSecurityIdentifier',
        'manager_contact_id' => 'setManagerContactId',
        'assistant_contact_id' => 'setAssistantContactId',
        'title' => 'setTitle',
        'school' => 'setSchool',
        'nick_name' => 'setNickName',
        'married_flag' => 'setMarriedFlag',
        'children_flag' => 'setChildrenFlag',
        'significant_other' => 'setSignificantOther',
        'portal_password' => 'setPortalPassword',
        'portal_security_level' => 'setPortalSecurityLevel',
        'disable_portal_login_flag' => 'setDisablePortalLoginFlag',
        'unsubscribe_flag' => 'setUnsubscribeFlag',
        'gender' => 'setGender',
        'birth_day' => 'setBirthDay',
        'anniversary' => 'setAnniversary',
        'presence' => 'setPresence',
        'mobile_guid' => 'setMobileGuid',
        'facebook_url' => 'setFacebookUrl',
        'twitter_url' => 'setTwitterUrl',
        'linked_in_url' => 'setLinkedInUrl',
        'default_billing_flag' => 'setDefaultBillingFlag',
        'communication_items' => 'setCommunicationItems',
        '_info' => 'setInfo',
        'custom_fields' => 'setCustomFields'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'type' => 'getType',
        'company' => 'getCompany',
        'site' => 'getSite',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'relationship' => 'getRelationship',
        'department' => 'getDepartment',
        'inactive_flag' => 'getInactiveFlag',
        'default_merge_contact_id' => 'getDefaultMergeContactId',
        'security_identifier' => 'getSecurityIdentifier',
        'manager_contact_id' => 'getManagerContactId',
        'assistant_contact_id' => 'getAssistantContactId',
        'title' => 'getTitle',
        'school' => 'getSchool',
        'nick_name' => 'getNickName',
        'married_flag' => 'getMarriedFlag',
        'children_flag' => 'getChildrenFlag',
        'significant_other' => 'getSignificantOther',
        'portal_password' => 'getPortalPassword',
        'portal_security_level' => 'getPortalSecurityLevel',
        'disable_portal_login_flag' => 'getDisablePortalLoginFlag',
        'unsubscribe_flag' => 'getUnsubscribeFlag',
        'gender' => 'getGender',
        'birth_day' => 'getBirthDay',
        'anniversary' => 'getAnniversary',
        'presence' => 'getPresence',
        'mobile_guid' => 'getMobileGuid',
        'facebook_url' => 'getFacebookUrl',
        'twitter_url' => 'getTwitterUrl',
        'linked_in_url' => 'getLinkedInUrl',
        'default_billing_flag' => 'getDefaultBillingFlag',
        'communication_items' => 'getCommunicationItems',
        '_info' => 'getInfo',
        'custom_fields' => 'getCustomFields'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const GENDER_MALE = 'Male';
    const GENDER_FEMALE = 'Female';
    const PRESENCE_ONLINE = 'Online';
    const PRESENCE_DO_NOT_DISTURB = 'DoNotDisturb';
    const PRESENCE_AWAY = 'Away';
    const PRESENCE_OFFLINE = 'Offline';
    const PRESENCE_NO_AGENT = 'NoAgent';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
            self::GENDER_FEMALE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPresenceAllowableValues()
    {
        return [
            self::PRESENCE_ONLINE,
            self::PRESENCE_DO_NOT_DISTURB,
            self::PRESENCE_AWAY,
            self::PRESENCE_OFFLINE,
            self::PRESENCE_NO_AGENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['relationship'] = isset($data['relationship']) ? $data['relationship'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['inactive_flag'] = isset($data['inactive_flag']) ? $data['inactive_flag'] : null;
        $this->container['default_merge_contact_id'] = isset($data['default_merge_contact_id']) ? $data['default_merge_contact_id'] : null;
        $this->container['security_identifier'] = isset($data['security_identifier']) ? $data['security_identifier'] : null;
        $this->container['manager_contact_id'] = isset($data['manager_contact_id']) ? $data['manager_contact_id'] : null;
        $this->container['assistant_contact_id'] = isset($data['assistant_contact_id']) ? $data['assistant_contact_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['school'] = isset($data['school']) ? $data['school'] : null;
        $this->container['nick_name'] = isset($data['nick_name']) ? $data['nick_name'] : null;
        $this->container['married_flag'] = isset($data['married_flag']) ? $data['married_flag'] : null;
        $this->container['children_flag'] = isset($data['children_flag']) ? $data['children_flag'] : null;
        $this->container['significant_other'] = isset($data['significant_other']) ? $data['significant_other'] : null;
        $this->container['portal_password'] = isset($data['portal_password']) ? $data['portal_password'] : null;
        $this->container['portal_security_level'] = isset($data['portal_security_level']) ? $data['portal_security_level'] : null;
        $this->container['disable_portal_login_flag'] = isset($data['disable_portal_login_flag']) ? $data['disable_portal_login_flag'] : null;
        $this->container['unsubscribe_flag'] = isset($data['unsubscribe_flag']) ? $data['unsubscribe_flag'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['birth_day'] = isset($data['birth_day']) ? $data['birth_day'] : null;
        $this->container['anniversary'] = isset($data['anniversary']) ? $data['anniversary'] : null;
        $this->container['presence'] = isset($data['presence']) ? $data['presence'] : null;
        $this->container['mobile_guid'] = isset($data['mobile_guid']) ? $data['mobile_guid'] : null;
        $this->container['facebook_url'] = isset($data['facebook_url']) ? $data['facebook_url'] : null;
        $this->container['twitter_url'] = isset($data['twitter_url']) ? $data['twitter_url'] : null;
        $this->container['linked_in_url'] = isset($data['linked_in_url']) ? $data['linked_in_url'] : null;
        $this->container['default_billing_flag'] = isset($data['default_billing_flag']) ? $data['default_billing_flag'] : null;
        $this->container['communication_items'] = isset($data['communication_items']) ? $data['communication_items'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['first_name'] === null) {
            $invalid_properties[] = "'first_name' can't be null";
        }
        if ((strlen($this->container['first_name']) > 30)) {
            $invalid_properties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['last_name']) && (strlen($this->container['last_name']) > 30)) {
            $invalid_properties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['address_line1']) && (strlen($this->container['address_line1']) > 50)) {
            $invalid_properties[] = "invalid value for 'address_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address_line2']) && (strlen($this->container['address_line2']) > 50)) {
            $invalid_properties[] = "invalid value for 'address_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (strlen($this->container['city']) > 50)) {
            $invalid_properties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['state']) && (strlen($this->container['state']) > 50)) {
            $invalid_properties[] = "invalid value for 'state', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['zip']) && (strlen($this->container['zip']) > 12)) {
            $invalid_properties[] = "invalid value for 'zip', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['country']) && (strlen($this->container['country']) > 50)) {
            $invalid_properties[] = "invalid value for 'country', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['security_identifier']) && (strlen($this->container['security_identifier']) > 184)) {
            $invalid_properties[] = "invalid value for 'security_identifier', the character length must be smaller than or equal to 184.";
        }

        if (!is_null($this->container['title']) && (strlen($this->container['title']) > 100)) {
            $invalid_properties[] = "invalid value for 'title', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['school']) && (strlen($this->container['school']) > 50)) {
            $invalid_properties[] = "invalid value for 'school', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['nick_name']) && (strlen($this->container['nick_name']) > 30)) {
            $invalid_properties[] = "invalid value for 'nick_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['significant_other']) && (strlen($this->container['significant_other']) > 30)) {
            $invalid_properties[] = "invalid value for 'significant_other', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['portal_password']) && (strlen($this->container['portal_password']) > 15)) {
            $invalid_properties[] = "invalid value for 'portal_password', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['portal_security_level']) && ($this->container['portal_security_level'] > 6)) {
            $invalid_properties[] = "invalid value for 'portal_security_level', must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['portal_security_level']) && ($this->container['portal_security_level'] < 1)) {
            $invalid_properties[] = "invalid value for 'portal_security_level', must be bigger than or equal to 1.";
        }

        $allowed_values = ["Male", "Female"];
        if (!in_array($this->container['gender'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'gender', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Online", "DoNotDisturb", "Away", "Offline", "NoAgent"];
        if (!in_array($this->container['presence'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'presence', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['first_name'] === null) {
            return false;
        }
        if (strlen($this->container['first_name']) > 30) {
            return false;
        }
        if (strlen($this->container['last_name']) > 30) {
            return false;
        }
        if (strlen($this->container['address_line1']) > 50) {
            return false;
        }
        if (strlen($this->container['address_line2']) > 50) {
            return false;
        }
        if (strlen($this->container['city']) > 50) {
            return false;
        }
        if (strlen($this->container['state']) > 50) {
            return false;
        }
        if (strlen($this->container['zip']) > 12) {
            return false;
        }
        if (strlen($this->container['country']) > 50) {
            return false;
        }
        if (strlen($this->container['security_identifier']) > 184) {
            return false;
        }
        if (strlen($this->container['title']) > 100) {
            return false;
        }
        if (strlen($this->container['school']) > 50) {
            return false;
        }
        if (strlen($this->container['nick_name']) > 30) {
            return false;
        }
        if (strlen($this->container['significant_other']) > 30) {
            return false;
        }
        if (strlen($this->container['portal_password']) > 15) {
            return false;
        }
        if ($this->container['portal_security_level'] > 6) {
            return false;
        }
        if ($this->container['portal_security_level'] < 1) {
            return false;
        }
        $allowed_values = ["Male", "Female"];
        if (!in_array($this->container['gender'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Online", "DoNotDisturb", "Away", "Offline", "NoAgent"];
        if (!in_array($this->container['presence'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if ((strlen($first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Contact., must be smaller than or equal to 30.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (strlen($last_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Contact., must be smaller than or equal to 30.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets type
     * @return \Spinen\ConnectWise\Clients\Company\Model\ContactTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Spinen\ConnectWise\Clients\Company\Model\ContactTypeReference $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Company\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Company\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets site
     * @return \Spinen\ConnectWise\Clients\Company\Model\SiteReference
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     * @param \Spinen\ConnectWise\Clients\Company\Model\SiteReference $site
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets address_line1
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     * @param string $address_line1
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        if (!is_null($address_line1) && (strlen($address_line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling Contact., must be smaller than or equal to 50.');
        }

        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     * @param string $address_line2
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        if (!is_null($address_line2) && (strlen($address_line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling Contact., must be smaller than or equal to 50.');
        }

        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Contact., must be smaller than or equal to 50.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        if (!is_null($state) && (strlen($state) > 50)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Contact., must be smaller than or equal to 50.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip
     * @return $this
     */
    public function setZip($zip)
    {
        if (!is_null($zip) && (strlen($zip) > 12)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling Contact., must be smaller than or equal to 12.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country
     * @return $this
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (strlen($country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Contact., must be smaller than or equal to 50.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets relationship
     * @return \Spinen\ConnectWise\Clients\Company\Model\RelationshipReference
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     * @param \Spinen\ConnectWise\Clients\Company\Model\RelationshipReference $relationship
     * @return $this
     */
    public function setRelationship($relationship)
    {
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets department
     * @return \Spinen\ConnectWise\Clients\Company\Model\ContactDepartmentReference
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     * @param \Spinen\ConnectWise\Clients\Company\Model\ContactDepartmentReference $department
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets inactive_flag
     * @return bool
     */
    public function getInactiveFlag()
    {
        return $this->container['inactive_flag'];
    }

    /**
     * Sets inactive_flag
     * @param bool $inactive_flag
     * @return $this
     */
    public function setInactiveFlag($inactive_flag)
    {
        $this->container['inactive_flag'] = $inactive_flag;

        return $this;
    }

    /**
     * Gets default_merge_contact_id
     * @return int
     */
    public function getDefaultMergeContactId()
    {
        return $this->container['default_merge_contact_id'];
    }

    /**
     * Sets default_merge_contact_id
     * @param int $default_merge_contact_id
     * @return $this
     */
    public function setDefaultMergeContactId($default_merge_contact_id)
    {
        $this->container['default_merge_contact_id'] = $default_merge_contact_id;

        return $this;
    }

    /**
     * Gets security_identifier
     * @return string
     */
    public function getSecurityIdentifier()
    {
        return $this->container['security_identifier'];
    }

    /**
     * Sets security_identifier
     * @param string $security_identifier
     * @return $this
     */
    public function setSecurityIdentifier($security_identifier)
    {
        if (!is_null($security_identifier) && (strlen($security_identifier) > 184)) {
            throw new \InvalidArgumentException('invalid length for $security_identifier when calling Contact., must be smaller than or equal to 184.');
        }

        $this->container['security_identifier'] = $security_identifier;

        return $this;
    }

    /**
     * Gets manager_contact_id
     * @return int
     */
    public function getManagerContactId()
    {
        return $this->container['manager_contact_id'];
    }

    /**
     * Sets manager_contact_id
     * @param int $manager_contact_id
     * @return $this
     */
    public function setManagerContactId($manager_contact_id)
    {
        $this->container['manager_contact_id'] = $manager_contact_id;

        return $this;
    }

    /**
     * Gets assistant_contact_id
     * @return int
     */
    public function getAssistantContactId()
    {
        return $this->container['assistant_contact_id'];
    }

    /**
     * Sets assistant_contact_id
     * @param int $assistant_contact_id
     * @return $this
     */
    public function setAssistantContactId($assistant_contact_id)
    {
        $this->container['assistant_contact_id'] = $assistant_contact_id;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (strlen($title) > 100)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Contact., must be smaller than or equal to 100.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets school
     * @return string
     */
    public function getSchool()
    {
        return $this->container['school'];
    }

    /**
     * Sets school
     * @param string $school
     * @return $this
     */
    public function setSchool($school)
    {
        if (!is_null($school) && (strlen($school) > 50)) {
            throw new \InvalidArgumentException('invalid length for $school when calling Contact., must be smaller than or equal to 50.');
        }

        $this->container['school'] = $school;

        return $this;
    }

    /**
     * Gets nick_name
     * @return string
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     * @param string $nick_name
     * @return $this
     */
    public function setNickName($nick_name)
    {
        if (!is_null($nick_name) && (strlen($nick_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $nick_name when calling Contact., must be smaller than or equal to 30.');
        }

        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets married_flag
     * @return bool
     */
    public function getMarriedFlag()
    {
        return $this->container['married_flag'];
    }

    /**
     * Sets married_flag
     * @param bool $married_flag
     * @return $this
     */
    public function setMarriedFlag($married_flag)
    {
        $this->container['married_flag'] = $married_flag;

        return $this;
    }

    /**
     * Gets children_flag
     * @return bool
     */
    public function getChildrenFlag()
    {
        return $this->container['children_flag'];
    }

    /**
     * Sets children_flag
     * @param bool $children_flag
     * @return $this
     */
    public function setChildrenFlag($children_flag)
    {
        $this->container['children_flag'] = $children_flag;

        return $this;
    }

    /**
     * Gets significant_other
     * @return string
     */
    public function getSignificantOther()
    {
        return $this->container['significant_other'];
    }

    /**
     * Sets significant_other
     * @param string $significant_other
     * @return $this
     */
    public function setSignificantOther($significant_other)
    {
        if (!is_null($significant_other) && (strlen($significant_other) > 30)) {
            throw new \InvalidArgumentException('invalid length for $significant_other when calling Contact., must be smaller than or equal to 30.');
        }

        $this->container['significant_other'] = $significant_other;

        return $this;
    }

    /**
     * Gets portal_password
     * @return string
     */
    public function getPortalPassword()
    {
        return $this->container['portal_password'];
    }

    /**
     * Sets portal_password
     * @param string $portal_password
     * @return $this
     */
    public function setPortalPassword($portal_password)
    {
        if (!is_null($portal_password) && (strlen($portal_password) > 15)) {
            throw new \InvalidArgumentException('invalid length for $portal_password when calling Contact., must be smaller than or equal to 15.');
        }

        $this->container['portal_password'] = $portal_password;

        return $this;
    }

    /**
     * Gets portal_security_level
     * @return int
     */
    public function getPortalSecurityLevel()
    {
        return $this->container['portal_security_level'];
    }

    /**
     * Sets portal_security_level
     * @param int $portal_security_level
     * @return $this
     */
    public function setPortalSecurityLevel($portal_security_level)
    {

        if (!is_null($portal_security_level) && ($portal_security_level > 6)) {
            throw new \InvalidArgumentException('invalid value for $portal_security_level when calling Contact., must be smaller than or equal to 6.');
        }
        if (!is_null($portal_security_level) && ($portal_security_level < 1)) {
            throw new \InvalidArgumentException('invalid value for $portal_security_level when calling Contact., must be bigger than or equal to 1.');
        }

        $this->container['portal_security_level'] = $portal_security_level;

        return $this;
    }

    /**
     * Gets disable_portal_login_flag
     * @return bool
     */
    public function getDisablePortalLoginFlag()
    {
        return $this->container['disable_portal_login_flag'];
    }

    /**
     * Sets disable_portal_login_flag
     * @param bool $disable_portal_login_flag
     * @return $this
     */
    public function setDisablePortalLoginFlag($disable_portal_login_flag)
    {
        $this->container['disable_portal_login_flag'] = $disable_portal_login_flag;

        return $this;
    }

    /**
     * Gets unsubscribe_flag
     * @return bool
     */
    public function getUnsubscribeFlag()
    {
        return $this->container['unsubscribe_flag'];
    }

    /**
     * Sets unsubscribe_flag
     * @param bool $unsubscribe_flag
     * @return $this
     */
    public function setUnsubscribeFlag($unsubscribe_flag)
    {
        $this->container['unsubscribe_flag'] = $unsubscribe_flag;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender
     * @return $this
     */
    public function setGender($gender)
    {
        $allowed_values = array('Male', 'Female');
        if (!is_null($gender) && (!in_array($gender, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'gender', must be one of 'Male', 'Female'");
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birth_day
     * @return \DateTime
     */
    public function getBirthDay()
    {
        return $this->container['birth_day'];
    }

    /**
     * Sets birth_day
     * @param \DateTime $birth_day
     * @return $this
     */
    public function setBirthDay($birth_day)
    {
        $this->container['birth_day'] = $birth_day;

        return $this;
    }

    /**
     * Gets anniversary
     * @return \DateTime
     */
    public function getAnniversary()
    {
        return $this->container['anniversary'];
    }

    /**
     * Sets anniversary
     * @param \DateTime $anniversary
     * @return $this
     */
    public function setAnniversary($anniversary)
    {
        $this->container['anniversary'] = $anniversary;

        return $this;
    }

    /**
     * Gets presence
     * @return string
     */
    public function getPresence()
    {
        return $this->container['presence'];
    }

    /**
     * Sets presence
     * @param string $presence
     * @return $this
     */
    public function setPresence($presence)
    {
        $allowed_values = array('Online', 'DoNotDisturb', 'Away', 'Offline', 'NoAgent');
        if (!is_null($presence) && (!in_array($presence, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'presence', must be one of 'Online', 'DoNotDisturb', 'Away', 'Offline', 'NoAgent'");
        }
        $this->container['presence'] = $presence;

        return $this;
    }

    /**
     * Gets mobile_guid
     * @return \Spinen\ConnectWise\Clients\Company\Model\Guid
     */
    public function getMobileGuid()
    {
        return $this->container['mobile_guid'];
    }

    /**
     * Sets mobile_guid
     * @param \Spinen\ConnectWise\Clients\Company\Model\Guid $mobile_guid
     * @return $this
     */
    public function setMobileGuid($mobile_guid)
    {
        $this->container['mobile_guid'] = $mobile_guid;

        return $this;
    }

    /**
     * Gets facebook_url
     * @return string
     */
    public function getFacebookUrl()
    {
        return $this->container['facebook_url'];
    }

    /**
     * Sets facebook_url
     * @param string $facebook_url
     * @return $this
     */
    public function setFacebookUrl($facebook_url)
    {
        $this->container['facebook_url'] = $facebook_url;

        return $this;
    }

    /**
     * Gets twitter_url
     * @return string
     */
    public function getTwitterUrl()
    {
        return $this->container['twitter_url'];
    }

    /**
     * Sets twitter_url
     * @param string $twitter_url
     * @return $this
     */
    public function setTwitterUrl($twitter_url)
    {
        $this->container['twitter_url'] = $twitter_url;

        return $this;
    }

    /**
     * Gets linked_in_url
     * @return string
     */
    public function getLinkedInUrl()
    {
        return $this->container['linked_in_url'];
    }

    /**
     * Sets linked_in_url
     * @param string $linked_in_url
     * @return $this
     */
    public function setLinkedInUrl($linked_in_url)
    {
        $this->container['linked_in_url'] = $linked_in_url;

        return $this;
    }

    /**
     * Gets default_billing_flag
     * @return bool
     */
    public function getDefaultBillingFlag()
    {
        return $this->container['default_billing_flag'];
    }

    /**
     * Sets default_billing_flag
     * @param bool $default_billing_flag
     * @return $this
     */
    public function setDefaultBillingFlag($default_billing_flag)
    {
        $this->container['default_billing_flag'] = $default_billing_flag;

        return $this;
    }

    /**
     * Gets communication_items
     * @return \Spinen\ConnectWise\Clients\Company\Model\ContactCommunicationItem[]
     */
    public function getCommunicationItems()
    {
        return $this->container['communication_items'];
    }

    /**
     * Sets communication_items
     * @param \Spinen\ConnectWise\Clients\Company\Model\ContactCommunicationItem[] $communication_items
     * @return $this
     */
    public function setCommunicationItems($communication_items)
    {
        $this->container['communication_items'] = $communication_items;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Company\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Company\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Gets custom_fields
     * @return \Spinen\ConnectWise\Clients\Company\Model\CustomFieldValue[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Spinen\ConnectWise\Clients\Company\Model\CustomFieldValue[] $custom_fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Company\ObjectSerializer::sanitizeForSerialization($this));
    }
}


